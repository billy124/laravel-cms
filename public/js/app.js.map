{"version":3,"sources":["iframe-transport.js","fileupload.js","history.js","app.js","functions.js","functions/ajax-file-upload.widget.js","functions/ajax-submit-form.js","functions/functions.js"],"names":[],"mappingszr8CA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/*\n * jQuery Iframe Transport Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* global define, require, window, document */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define(['jquery'], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(require('jquery'));\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Helper variable to create unique names for the transport iframes:\n    var counter = 0;\n\n    // The iframe transport accepts four additional options:\n    // options.fileInput: a jQuery collection of file input fields\n    // options.paramName: the parameter name for the file form data,\n    //  overrides the name property of the file input field(s),\n    //  can be a string or an array of strings.\n    // options.formData: an array of objects with name and value properties,\n    //  equivalent to the return data of .serializeArray(), e.g.:\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]\n    // options.initialIframeSrc: the URL of the initial iframe src,\n    //  by default set to \"javascript:false;\"\n    $.ajaxTransport('iframe', function (options) {\n        if (options.async) {\n            // javascript:false as initial iframe src\n            // prevents warning popups on HTTPS in IE6:\n            /*jshint scripturl: true */\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',\n            /*jshint scripturl: false */\n                form,\n                iframe,\n                addParamChar;\n            return {\n                send: function (_, completeCallback) {\n                    form = $('<form style=\"display:none;\"></form>');\n                    form.attr('accept-charset', options.formAcceptCharset);\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';\n                    // XDomainRequest only supports GET and POST:\n                    if (options.type === 'DELETE') {\n                        options.url = options.url + addParamChar + '_method=DELETE';\n                        options.type = 'POST';\n                    } else if (options.type === 'PUT') {\n                        options.url = options.url + addParamChar + '_method=PUT';\n                        options.type = 'POST';\n                    } else if (options.type === 'PATCH') {\n                        options.url = options.url + addParamChar + '_method=PATCH';\n                        options.type = 'POST';\n                    }\n                    // IE versions below IE8 cannot set the name property of\n                    // elements that have already been added to the DOM,\n                    // so we set the name along with the iframe HTML markup:\n                    counter += 1;\n                    iframe = $(\n                        '<iframe src=\"' + initialIframeSrc +\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'\n                    ).bind('load', function () {\n                        var fileInputClones,\n                            paramNames = $.isArray(options.paramName) ?\n                                    options.paramName : [options.paramName];\n                        iframe\n                            .unbind('load')\n                            .bind('load', function () {\n                                var response;\n                                // Wrap in a try/catch block to catch exceptions thrown\n                                // when trying to access cross-domain iframe contents:\n                                try {\n                                    response = iframe.contents();\n                                    // Google Chrome and Firefox do not throw an\n                                    // exception when calling iframe.contents() on\n                                    // cross-domain requests, so we unify the response:\n                                    if (!response.length || !response[0].firstChild) {\n                                        throw new Error();\n                                    }\n                                } catch (e) {\n                                    response = undefined;\n                                }\n                                // The complete callback returns the\n                                // iframe content document as response object:\n                                completeCallback(\n                                    200,\n                                    'success',\n                                    {'iframe': response}\n                                );\n                                // Fix for IE endless progress bar activity bug\n                                // (happens on form submits to iframe targets):\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')\n                                    .appendTo(form);\n                                window.setTimeout(function () {\n                                    // Removing the form in a setTimeout call\n                                    // allows Chrome's developer tools to display\n                                    // the response result\n                                    form.remove();\n                                }, 0);\n                            });\n                        form\n                            .prop('target', iframe.prop('name'))\n                            .prop('action', options.url)\n                            .prop('method', options.type);\n                        if (options.formData) {\n                            $.each(options.formData, function (index, field) {\n                                $('<input type=\"hidden\"/>')\n                                    .prop('name', field.name)\n                                    .val(field.value)\n                                    .appendTo(form);\n                            });\n                        }\n                        if (options.fileInput && options.fileInput.length &&\n                                options.type === 'POST') {\n                            fileInputClones = options.fileInput.clone();\n                            // Insert a clone for each file input field:\n                            options.fileInput.after(function (index) {\n                                return fileInputClones[index];\n                            });\n                            if (options.paramName) {\n                                options.fileInput.each(function (index) {\n                                    $(this).prop(\n                                        'name',\n                                        paramNames[index] || options.paramName\n                                    );\n                                });\n                            }\n                            // Appending the file input fields to the hidden form\n                            // removes them from their original location:\n                            form\n                                .append(options.fileInput)\n                                .prop('enctype', 'multipart/form-data')\n                                // enctype must be set as encoding for IE:\n                                .prop('encoding', 'multipart/form-data');\n                            // Remove the HTML5 form attribute from the input(s):\n                            options.fileInput.removeAttr('form');\n                        }\n                        form.submit();\n                        // Insert the file input fields at their original location\n                        // by replacing the clones with the originals:\n                        if (fileInputClones && fileInputClones.length) {\n                            options.fileInput.each(function (index, input) {\n                                var clone = $(fileInputClones[index]);\n                                // Restore the original name and form properties:\n                                $(input)\n                                    .prop('name', clone.prop('name'))\n                                    .attr('form', clone.attr('form'));\n                                clone.replaceWith(input);\n                            });\n                        }\n                    });\n                    form.append(iframe).appendTo(document.body);\n                },\n                abort: function () {\n                    if (iframe) {\n                        // javascript:false as iframe src aborts the request\n                        // and prevents warning popups on HTTPS in IE6.\n                        // concat is used to avoid the \"Script URL\" JSLint error:\n                        iframe\n                            .unbind('load')\n                            .prop('src', initialIframeSrc);\n                    }\n                    if (form) {\n                        form.remove();\n                    }\n                }\n            };\n        }\n    });\n\n    // The iframe transport returns the iframe content document as response.\n    // The following adds converters from iframe to text, json, html, xml\n    // and script.\n    // Please note that the Content-Type for JSON responses has to be text/plain\n    // or text/html, if the browser doesn't include application/json in the\n    // Accept header, else IE will show a download dialog.\n    // The Content-Type for XML responses on the other hand has to be always\n    // application/xml or text/xml, so IE properly parses the XML response.\n    // See also\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation\n    $.ajaxSetup({\n        converters: {\n            'iframe text': function (iframe) {\n                return iframe && $(iframe[0].body).text();\n            },\n            'iframe json': function (iframe) {\n                return iframe && $.parseJSON($(iframe[0].body).text());\n            },\n            'iframe html': function (iframe) {\n                return iframe && $(iframe[0].body).html();\n            },\n            'iframe xml': function (iframe) {\n                var xmlDoc = iframe && iframe[0];\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||\n                            $(xmlDoc.body).html());\n            },\n            'iframe script': function (iframe) {\n                return iframe && $.globalEval($(iframe[0].body).text());\n            }\n        }\n    });\n\n}));\n","/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document, location, Blob, FormData */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'jquery.ui.widget'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('./vendor/jquery.ui.widget')\n        );\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Detect file input support, based on\n    // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n    $.support.fileInput = !(new RegExp(\n        // Handle devices which give false positives for the feature detection:\n        '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n            '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n            '|(w(eb)?OSBrowser)|(webOS)' +\n            '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n        // Feature detection for all other devices:\n        $('<input type=\"file\">').prop('disabled'));\n\n    // The FileReader API is not actually used, but works as feature detection,\n    // as some Safari versions (5?) support XHR file uploads via the FormData API,\n    // but not non-multipart XHR file uploads.\n    // window.XMLHttpRequestUpload is not available on IE10, so we check for\n    // window.ProgressEvent instead to detect XHR2 file upload capability:\n    $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n    $.support.xhrFormDataFileUpload = !!window.FormData;\n\n    // Detect support for Blob slicing (required for chunked uploads):\n    $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n        Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n    // Helper function to create drag handlers for dragover/dragenter/dragleave:\n    function getDragHandler(type) {\n        var isDragOver = type === 'dragover';\n        return function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var dataTransfer = e.dataTransfer;\n            if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&\n                    this._trigger(\n                        type,\n                        $.Event(type, {delegatedEvent: e})\n                    ) !== false) {\n                e.preventDefault();\n                if (isDragOver) {\n                    dataTransfer.dropEffect = 'copy';\n                }\n            }\n        };\n    }\n\n    // The fileupload widget listens for change events on file input fields defined\n    // via fileInput setting and paste or drop events of the given dropZone.\n    // In addition to the default jQuery Widget methods, the fileupload widget\n    // exposes the \"add\" and \"send\" methods, to add or directly send files using\n    // the fileupload API.\n    // By default, files added via file input selection, paste, drag & drop or\n    // \"add\" method are uploaded immediately, but it is possible to override\n    // the \"add\" callback option to queue file uploads.\n    $.widget('blueimp.fileupload', {\n\n        options: {\n            // The drop target element(s), by the default the complete document.\n            // Set to null to disable drag & drop support:\n            dropZone: $(document),\n            // The paste target element(s), by the default undefined.\n            // Set to a DOM node or jQuery object to enable file pasting:\n            pasteZone: undefined,\n            // The file input field(s), that are listened to for change events.\n            // If undefined, it is set to the file input fields inside\n            // of the widget element on plugin initialization.\n            // Set to null to disable the change listener.\n            fileInput: undefined,\n            // By default, the file input field is replaced with a clone after\n            // each input field change event. This is required for iframe transport\n            // queues and allows change events to be fired for the same file\n            // selection, but can be disabled by setting the following option to false:\n            replaceFileInput: true,\n            // The parameter name for the file form data (the request argument name).\n            // If undefined or empty, the name property of the file input field is\n            // used, or \"files[]\" if the file input name property is also empty,\n            // can be a string or an array of strings:\n            paramName: undefined,\n            // By default, each file of a selection is uploaded using an individual\n            // request for XHR type uploads. Set to false to upload file\n            // selections in one request each:\n            singleFileUploads: true,\n            // To limit the number of files uploaded with one XHR request,\n            // set the following option to an integer greater than 0:\n            limitMultiFileUploads: undefined,\n            // The following option limits the number of files uploaded with one\n            // XHR request to keep the request size under or equal to the defined\n            // limit in bytes:\n            limitMultiFileUploadSize: undefined,\n            // Multipart file uploads add a number of bytes to each uploaded file,\n            // therefore the following option adds an overhead for each file used\n            // in the limitMultiFileUploadSize configuration:\n            limitMultiFileUploadSizeOverhead: 512,\n            // Set the following option to true to issue all file upload requests\n            // in a sequential order:\n            sequentialUploads: false,\n            // To limit the number of concurrent uploads,\n            // set the following option to an integer greater than 0:\n            limitConcurrentUploads: undefined,\n            // Set the following option to true to force iframe transport uploads:\n            forceIframeTransport: false,\n            // Set the following option to the location of a redirect url on the\n            // origin server, for cross-domain iframe transport uploads:\n            redirect: undefined,\n            // The parameter name for the redirect url, sent as part of the form\n            // data and set to 'redirect' if this option is empty:\n            redirectParamName: undefined,\n            // Set the following option to the location of a postMessage window,\n            // to enable postMessage transport uploads:\n            postMessage: undefined,\n            // By default, XHR file uploads are sent as multipart/form-data.\n            // The iframe transport is always using multipart/form-data.\n            // Set to false to enable non-multipart XHR uploads:\n            multipart: true,\n            // To upload large files in smaller chunks, set the following option\n            // to a preferred maximum chunk size. If set to 0, null or undefined,\n            // or the browser does not support the required Blob API, files will\n            // be uploaded as a whole.\n            maxChunkSize: undefined,\n            // When a non-multipart upload or a chunked multipart upload has been\n            // aborted, this option can be used to resume the upload by setting\n            // it to the size of the already uploaded bytes. This option is most\n            // useful when modifying the options object inside of the \"add\" or\n            // \"send\" callbacks, as the options are cloned for each file upload.\n            uploadedBytes: undefined,\n            // By default, failed (abort or error) file uploads are removed from the\n            // global progress calculation. Set the following option to false to\n            // prevent recalculating the global progress data:\n            recalculateProgress: true,\n            // Interval in milliseconds to calculate and trigger progress events:\n            progressInterval: 100,\n            // Interval in milliseconds to calculate progress bitrate:\n            bitrateInterval: 500,\n            // By default, uploads are started automatically when adding files:\n            autoUpload: true,\n\n            // Error and info messages:\n            messages: {\n                uploadedBytes: 'Uploaded bytes exceed file size'\n            },\n\n            // Translation function, gets the message key to be translated\n            // and an object with context specific data as arguments:\n            i18n: function (message, context) {\n                message = this.messages[message] || message.toString();\n                if (context) {\n                    $.each(context, function (key, value) {\n                        message = message.replace('{' + key + '}', value);\n                    });\n                }\n                return message;\n            },\n\n            // Additional form data to be sent along with the file uploads can be set\n            // using this option, which accepts an array of objects with name and\n            // value properties, a function returning such an array, a FormData\n            // object (for XHR file uploads), or a simple object.\n            // The form of the first fileInput is given as parameter to the function:\n            formData: function (form) {\n                return form.serializeArray();\n            },\n\n            // The add callback is invoked as soon as files are added to the fileupload\n            // widget (via file input selection, drag & drop, paste or add API call).\n            // If the singleFileUploads option is enabled, this callback will be\n            // called once for each file in the selection for XHR file uploads, else\n            // once for each file selection.\n            //\n            // The upload starts when the submit method is invoked on the data parameter.\n            // The data object contains a files property holding the added files\n            // and allows you to override plugin options as well as define ajax settings.\n            //\n            // Listeners for this callback can also be bound the following way:\n            // .bind('fileuploadadd', func);\n            //\n            // data.submit() returns a Promise object and allows to attach additional\n            // handlers using jQuery's Deferred callbacks:\n            // data.submit().done(func).fail(func).always(func);\n            add: function (e, data) {\n                if (e.isDefaultPrevented()) {\n                    return false;\n                }\n                if (data.autoUpload || (data.autoUpload !== false &&\n                        $(this).fileupload('option', 'autoUpload'))) {\n                    data.process().done(function () {\n                        data.submit();\n                    });\n                }\n            },\n\n            // Other callbacks:\n\n            // Callback for the submit event of each file upload:\n            // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n            // Callback for the start of each file upload request:\n            // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n            // Callback for successful uploads:\n            // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n            // Callback for failed (abort or error) uploads:\n            // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n            // Callback for completed (success, abort or error) requests:\n            // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n            // Callback for upload progress events:\n            // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n            // Callback for global upload progress events:\n            // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n            // Callback for uploads start, equivalent to the global ajaxStart event:\n            // start: function (e) {}, // .bind('fileuploadstart', func);\n\n            // Callback for uploads stop, equivalent to the global ajaxStop event:\n            // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n            // Callback for change events of the fileInput(s):\n            // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n            // Callback for paste events to the pasteZone(s):\n            // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n            // Callback for drop events of the dropZone(s):\n            // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n            // Callback for dragover events of the dropZone(s):\n            // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n            // Callback for the start of each chunk upload request:\n            // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n            // Callback for successful chunk uploads:\n            // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n            // Callback for failed (abort or error) chunk uploads:\n            // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n            // Callback for completed (success, abort or error) chunk upload requests:\n            // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n            // The plugin options are used as settings object for the ajax calls.\n            // The following are jQuery ajax settings required for the file uploads:\n            processData: false,\n            contentType: false,\n            cache: false,\n            timeout: 0\n        },\n\n        // A list of options that require reinitializing event listeners and/or\n        // special initialization code:\n        _specialOptions: [\n            'fileInput',\n            'dropZone',\n            'pasteZone',\n            'multipart',\n            'forceIframeTransport'\n        ],\n\n        _blobSlice: $.support.blobSlice && function () {\n            var slice = this.slice || this.webkitSlice || this.mozSlice;\n            return slice.apply(this, arguments);\n        },\n\n        _BitrateTimer: function () {\n            this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n            this.loaded = 0;\n            this.bitrate = 0;\n            this.getBitrate = function (now, loaded, interval) {\n                var timeDiff = now - this.timestamp;\n                if (!this.bitrate || !interval || timeDiff > interval) {\n                    this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n                    this.loaded = loaded;\n                    this.timestamp = now;\n                }\n                return this.bitrate;\n            };\n        },\n\n        _isXHRUpload: function (options) {\n            return !options.forceIframeTransport &&\n                ((!options.multipart && $.support.xhrFileUpload) ||\n                $.support.xhrFormDataFileUpload);\n        },\n\n        _getFormData: function (options) {\n            var formData;\n            if ($.type(options.formData) === 'function') {\n                return options.formData(options.form);\n            }\n            if ($.isArray(options.formData)) {\n                return options.formData;\n            }\n            if ($.type(options.formData) === 'object') {\n                formData = [];\n                $.each(options.formData, function (name, value) {\n                    formData.push({name: name, value: value});\n                });\n                return formData;\n            }\n            return [];\n        },\n\n        _getTotal: function (files) {\n            var total = 0;\n            $.each(files, function (index, file) {\n                total += file.size || 1;\n            });\n            return total;\n        },\n\n        _initProgressObject: function (obj) {\n            var progress = {\n                loaded: 0,\n                total: 0,\n                bitrate: 0\n            };\n            if (obj._progress) {\n                $.extend(obj._progress, progress);\n            } else {\n                obj._progress = progress;\n            }\n        },\n\n        _initResponseObject: function (obj) {\n            var prop;\n            if (obj._response) {\n                for (prop in obj._response) {\n                    if (obj._response.hasOwnProperty(prop)) {\n                        delete obj._response[prop];\n                    }\n                }\n            } else {\n                obj._response = {};\n            }\n        },\n\n        _onProgress: function (e, data) {\n            if (e.lengthComputable) {\n                var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n                    loaded;\n                if (data._time && data.progressInterval &&\n                        (now - data._time < data.progressInterval) &&\n                        e.loaded !== e.total) {\n                    return;\n                }\n                data._time = now;\n                loaded = Math.floor(\n                    e.loaded / e.total * (data.chunkSize || data._progress.total)\n                ) + (data.uploadedBytes || 0);\n                // Add the difference from the previously loaded state\n                // to the global loaded counter:\n                this._progress.loaded += (loaded - data._progress.loaded);\n                this._progress.bitrate = this._bitrateTimer.getBitrate(\n                    now,\n                    this._progress.loaded,\n                    data.bitrateInterval\n                );\n                data._progress.loaded = data.loaded = loaded;\n                data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n                    now,\n                    loaded,\n                    data.bitrateInterval\n                );\n                // Trigger a custom progress event with a total data property set\n                // to the file size(s) of the current upload and a loaded data\n                // property calculated accordingly:\n                this._trigger(\n                    'progress',\n                    $.Event('progress', {delegatedEvent: e}),\n                    data\n                );\n                // Trigger a global progress event for all current file uploads,\n                // including ajax calls queued for sequential file uploads:\n                this._trigger(\n                    'progressall',\n                    $.Event('progressall', {delegatedEvent: e}),\n                    this._progress\n                );\n            }\n        },\n\n        _initProgressListener: function (options) {\n            var that = this,\n                xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n            // Accesss to the native XHR object is required to add event listeners\n            // for the upload progress event:\n            if (xhr.upload) {\n                $(xhr.upload).bind('progress', function (e) {\n                    var oe = e.originalEvent;\n                    // Make sure the progress event properties get copied over:\n                    e.lengthComputable = oe.lengthComputable;\n                    e.loaded = oe.loaded;\n                    e.total = oe.total;\n                    that._onProgress(e, options);\n                });\n                options.xhr = function () {\n                    return xhr;\n                };\n            }\n        },\n\n        _isInstanceOf: function (type, obj) {\n            // Cross-frame instanceof check\n            return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n        },\n\n        _initXHRData: function (options) {\n            var that = this,\n                formData,\n                file = options.files[0],\n                // Ignore non-multipart setting if not supported:\n                multipart = options.multipart || !$.support.xhrFileUpload,\n                paramName = $.type(options.paramName) === 'array' ?\n                    options.paramName[0] : options.paramName;\n            options.headers = $.extend({}, options.headers);\n            if (options.contentRange) {\n                options.headers['Content-Range'] = options.contentRange;\n            }\n            if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n                options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n                    encodeURI(file.name) + '\"';\n            }\n            if (!multipart) {\n                options.contentType = file.type || 'application/octet-stream';\n                options.data = options.blob || file;\n            } else if ($.support.xhrFormDataFileUpload) {\n                if (options.postMessage) {\n                    // window.postMessage does not allow sending FormData\n                    // objects, so we just add the File/Blob objects to\n                    // the formData array and let the postMessage window\n                    // create the FormData object out of this array:\n                    formData = this._getFormData(options);\n                    if (options.blob) {\n                        formData.push({\n                            name: paramName,\n                            value: options.blob\n                        });\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            formData.push({\n                                name: ($.type(options.paramName) === 'array' &&\n                                    options.paramName[index]) || paramName,\n                                value: file\n                            });\n                        });\n                    }\n                } else {\n                    if (that._isInstanceOf('FormData', options.formData)) {\n                        formData = options.formData;\n                    } else {\n                        formData = new FormData();\n                        $.each(this._getFormData(options), function (index, field) {\n                            formData.append(field.name, field.value);\n                        });\n                    }\n                    if (options.blob) {\n                        formData.append(paramName, options.blob, file.name);\n                    } else {\n                        $.each(options.files, function (index, file) {\n                            // This check allows the tests to run with\n                            // dummy objects:\n                            if (that._isInstanceOf('File', file) ||\n                                    that._isInstanceOf('Blob', file)) {\n                                formData.append(\n                                    ($.type(options.paramName) === 'array' &&\n                                        options.paramName[index]) || paramName,\n                                    file,\n                                    file.uploadName || file.name\n                                );\n                            }\n                        });\n                    }\n                }\n                options.data = formData;\n            }\n            // Blob reference is not needed anymore, free memory:\n            options.blob = null;\n        },\n\n        _initIframeSettings: function (options) {\n            var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n            // Setting the dataType to iframe enables the iframe transport:\n            options.dataType = 'iframe ' + (options.dataType || '');\n            // The iframe transport accepts a serialized array as form data:\n            options.formData = this._getFormData(options);\n            // Add redirect url to form data on cross-domain uploads:\n            if (options.redirect && targetHost && targetHost !== location.host) {\n                options.formData.push({\n                    name: options.redirectParamName || 'redirect',\n                    value: options.redirect\n                });\n            }\n        },\n\n        _initDataSettings: function (options) {\n            if (this._isXHRUpload(options)) {\n                if (!this._chunkedUpload(options, true)) {\n                    if (!options.data) {\n                        this._initXHRData(options);\n                    }\n                    this._initProgressListener(options);\n                }\n                if (options.postMessage) {\n                    // Setting the dataType to postmessage enables the\n                    // postMessage transport:\n                    options.dataType = 'postmessage ' + (options.dataType || '');\n                }\n            } else {\n                this._initIframeSettings(options);\n            }\n        },\n\n        _getParamName: function (options) {\n            var fileInput = $(options.fileInput),\n                paramName = options.paramName;\n            if (!paramName) {\n                paramName = [];\n                fileInput.each(function () {\n                    var input = $(this),\n                        name = input.prop('name') || 'files[]',\n                        i = (input.prop('files') || [1]).length;\n                    while (i) {\n                        paramName.push(name);\n                        i -= 1;\n                    }\n                });\n                if (!paramName.length) {\n                    paramName = [fileInput.prop('name') || 'files[]'];\n                }\n            } else if (!$.isArray(paramName)) {\n                paramName = [paramName];\n            }\n            return paramName;\n        },\n\n        _initFormSettings: function (options) {\n            // Retrieve missing options from the input field and the\n            // associated form, if available:\n            if (!options.form || !options.form.length) {\n                options.form = $(options.fileInput.prop('form'));\n                // If the given file input doesn't have an associated form,\n                // use the default widget file input's form:\n                if (!options.form.length) {\n                    options.form = $(this.options.fileInput.prop('form'));\n                }\n            }\n            options.paramName = this._getParamName(options);\n            if (!options.url) {\n                options.url = options.form.prop('action') || location.href;\n            }\n            // The HTTP request method must be \"POST\" or \"PUT\":\n            options.type = (options.type ||\n                ($.type(options.form.prop('method')) === 'string' &&\n                    options.form.prop('method')) || ''\n                ).toUpperCase();\n            if (options.type !== 'POST' && options.type !== 'PUT' &&\n                    options.type !== 'PATCH') {\n                options.type = 'POST';\n            }\n            if (!options.formAcceptCharset) {\n                options.formAcceptCharset = options.form.attr('accept-charset');\n            }\n        },\n\n        _getAJAXSettings: function (data) {\n            var options = $.extend({}, this.options, data);\n            this._initFormSettings(options);\n            this._initDataSettings(options);\n            return options;\n        },\n\n        // jQuery 1.6 doesn't provide .state(),\n        // while jQuery 1.8+ removed .isRejected() and .isResolved():\n        _getDeferredState: function (deferred) {\n            if (deferred.state) {\n                return deferred.state();\n            }\n            if (deferred.isResolved()) {\n                return 'resolved';\n            }\n            if (deferred.isRejected()) {\n                return 'rejected';\n            }\n            return 'pending';\n        },\n\n        // Maps jqXHR callbacks to the equivalent\n        // methods of the given Promise object:\n        _enhancePromise: function (promise) {\n            promise.success = promise.done;\n            promise.error = promise.fail;\n            promise.complete = promise.always;\n            return promise;\n        },\n\n        // Creates and returns a Promise object enhanced with\n        // the jqXHR methods abort, success, error and complete:\n        _getXHRPromise: function (resolveOrReject, context, args) {\n            var dfd = $.Deferred(),\n                promise = dfd.promise();\n            context = context || this.options.context || promise;\n            if (resolveOrReject === true) {\n                dfd.resolveWith(context, args);\n            } else if (resolveOrReject === false) {\n                dfd.rejectWith(context, args);\n            }\n            promise.abort = dfd.promise;\n            return this._enhancePromise(promise);\n        },\n\n        // Adds convenience methods to the data callback argument:\n        _addConvenienceMethods: function (e, data) {\n            var that = this,\n                getPromise = function (args) {\n                    return $.Deferred().resolveWith(that, args).promise();\n                };\n            data.process = function (resolveFunc, rejectFunc) {\n                if (resolveFunc || rejectFunc) {\n                    data._processQueue = this._processQueue =\n                        (this._processQueue || getPromise([this])).pipe(\n                            function () {\n                                if (data.errorThrown) {\n                                    return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                                }\n                                return getPromise(arguments);\n                            }\n                        ).pipe(resolveFunc, rejectFunc);\n                }\n                return this._processQueue || getPromise([this]);\n            };\n            data.submit = function () {\n                if (this.state() !== 'pending') {\n                    data.jqXHR = this.jqXHR =\n                        (that._trigger(\n                            'submit',\n                            $.Event('submit', {delegatedEvent: e}),\n                            this\n                        ) !== false) && that._onSend(e, this);\n                }\n                return this.jqXHR || that._getXHRPromise();\n            };\n            data.abort = function () {\n                if (this.jqXHR) {\n                    return this.jqXHR.abort();\n                }\n                this.errorThrown = 'abort';\n                that._trigger('fail', null, this);\n                return that._getXHRPromise(false);\n            };\n            data.state = function () {\n                if (this.jqXHR) {\n                    return that._getDeferredState(this.jqXHR);\n                }\n                if (this._processQueue) {\n                    return that._getDeferredState(this._processQueue);\n                }\n            };\n            data.processing = function () {\n                return !this.jqXHR && this._processQueue && that\n                    ._getDeferredState(this._processQueue) === 'pending';\n            };\n            data.progress = function () {\n                return this._progress;\n            };\n            data.response = function () {\n                return this._response;\n            };\n        },\n\n        // Parses the Range header from the server response\n        // and returns the uploaded bytes:\n        _getUploadedBytes: function (jqXHR) {\n            var range = jqXHR.getResponseHeader('Range'),\n                parts = range && range.split('-'),\n                upperBytesPos = parts && parts.length > 1 &&\n                    parseInt(parts[1], 10);\n            return upperBytesPos && upperBytesPos + 1;\n        },\n\n        // Uploads a file in multiple, sequential requests\n        // by splitting the file up in multiple blob chunks.\n        // If the second parameter is true, only tests if the file\n        // should be uploaded in chunks, but does not invoke any\n        // upload requests:\n        _chunkedUpload: function (options, testOnly) {\n            options.uploadedBytes = options.uploadedBytes || 0;\n            var that = this,\n                file = options.files[0],\n                fs = file.size,\n                ub = options.uploadedBytes,\n                mcs = options.maxChunkSize || fs,\n                slice = this._blobSlice,\n                dfd = $.Deferred(),\n                promise = dfd.promise(),\n                jqXHR,\n                upload;\n            if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||\n                    options.data) {\n                return false;\n            }\n            if (testOnly) {\n                return true;\n            }\n            if (ub >= fs) {\n                file.error = options.i18n('uploadedBytes');\n                return this._getXHRPromise(\n                    false,\n                    options.context,\n                    [null, 'error', file.error]\n                );\n            }\n            // The chunk upload method:\n            upload = function () {\n                // Clone the options object for each chunk upload:\n                var o = $.extend({}, options),\n                    currentLoaded = o._progress.loaded;\n                o.blob = slice.call(\n                    file,\n                    ub,\n                    ub + mcs,\n                    file.type\n                );\n                // Store the current chunk size, as the blob itself\n                // will be dereferenced after data processing:\n                o.chunkSize = o.blob.size;\n                // Expose the chunk bytes position range:\n                o.contentRange = 'bytes ' + ub + '-' +\n                    (ub + o.chunkSize - 1) + '/' + fs;\n                // Process the upload data (the blob and potential form data):\n                that._initXHRData(o);\n                // Add progress listeners for this chunk upload:\n                that._initProgressListener(o);\n                jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n                        that._getXHRPromise(false, o.context))\n                    .done(function (result, textStatus, jqXHR) {\n                        ub = that._getUploadedBytes(jqXHR) ||\n                            (ub + o.chunkSize);\n                        // Create a progress event if no final progress event\n                        // with loaded equaling total has been triggered\n                        // for this chunk:\n                        if (currentLoaded + o.chunkSize - o._progress.loaded) {\n                            that._onProgress($.Event('progress', {\n                                lengthComputable: true,\n                                loaded: ub - o.uploadedBytes,\n                                total: ub - o.uploadedBytes\n                            }), o);\n                        }\n                        options.uploadedBytes = o.uploadedBytes = ub;\n                        o.result = result;\n                        o.textStatus = textStatus;\n                        o.jqXHR = jqXHR;\n                        that._trigger('chunkdone', null, o);\n                        that._trigger('chunkalways', null, o);\n                        if (ub < fs) {\n                            // File upload not yet complete,\n                            // continue with the next chunk:\n                            upload();\n                        } else {\n                            dfd.resolveWith(\n                                o.context,\n                                [result, textStatus, jqXHR]\n                            );\n                        }\n                    })\n                    .fail(function (jqXHR, textStatus, errorThrown) {\n                        o.jqXHR = jqXHR;\n                        o.textStatus = textStatus;\n                        o.errorThrown = errorThrown;\n                        that._trigger('chunkfail', null, o);\n                        that._trigger('chunkalways', null, o);\n                        dfd.rejectWith(\n                            o.context,\n                            [jqXHR, textStatus, errorThrown]\n                        );\n                    });\n            };\n            this._enhancePromise(promise);\n            promise.abort = function () {\n                return jqXHR.abort();\n            };\n            upload();\n            return promise;\n        },\n\n        _beforeSend: function (e, data) {\n            if (this._active === 0) {\n                // the start callback is triggered when an upload starts\n                // and no other uploads are currently running,\n                // equivalent to the global ajaxStart event:\n                this._trigger('start');\n                // Set timer for global bitrate progress calculation:\n                this._bitrateTimer = new this._BitrateTimer();\n                // Reset the global progress values:\n                this._progress.loaded = this._progress.total = 0;\n                this._progress.bitrate = 0;\n            }\n            // Make sure the container objects for the .response() and\n            // .progress() methods on the data object are available\n            // and reset to their initial state:\n            this._initResponseObject(data);\n            this._initProgressObject(data);\n            data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n            data._progress.total = data.total = this._getTotal(data.files) || 1;\n            data._progress.bitrate = data.bitrate = 0;\n            this._active += 1;\n            // Initialize the global progress values:\n            this._progress.loaded += data.loaded;\n            this._progress.total += data.total;\n        },\n\n        _onDone: function (result, textStatus, jqXHR, options) {\n            var total = options._progress.total,\n                response = options._response;\n            if (options._progress.loaded < total) {\n                // Create a progress event if no final progress event\n                // with loaded equaling total has been triggered:\n                this._onProgress($.Event('progress', {\n                    lengthComputable: true,\n                    loaded: total,\n                    total: total\n                }), options);\n            }\n            response.result = options.result = result;\n            response.textStatus = options.textStatus = textStatus;\n            response.jqXHR = options.jqXHR = jqXHR;\n            this._trigger('done', null, options);\n        },\n\n        _onFail: function (jqXHR, textStatus, errorThrown, options) {\n            var response = options._response;\n            if (options.recalculateProgress) {\n                // Remove the failed (error or abort) file upload from\n                // the global progress calculation:\n                this._progress.loaded -= options._progress.loaded;\n                this._progress.total -= options._progress.total;\n            }\n            response.jqXHR = options.jqXHR = jqXHR;\n            response.textStatus = options.textStatus = textStatus;\n            response.errorThrown = options.errorThrown = errorThrown;\n            this._trigger('fail', null, options);\n        },\n\n        _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n            // jqXHRorResult, textStatus and jqXHRorError are added to the\n            // options object via done and fail callbacks\n            this._trigger('always', null, options);\n        },\n\n        _onSend: function (e, data) {\n            if (!data.submit) {\n                this._addConvenienceMethods(e, data);\n            }\n            var that = this,\n                jqXHR,\n                aborted,\n                slot,\n                pipe,\n                options = that._getAJAXSettings(data),\n                send = function () {\n                    that._sending += 1;\n                    // Set timer for bitrate progress calculation:\n                    options._bitrateTimer = new that._BitrateTimer();\n                    jqXHR = jqXHR || (\n                        ((aborted || that._trigger(\n                            'send',\n                            $.Event('send', {delegatedEvent: e}),\n                            options\n                        ) === false) &&\n                        that._getXHRPromise(false, options.context, aborted)) ||\n                        that._chunkedUpload(options) || $.ajax(options)\n                    ).done(function (result, textStatus, jqXHR) {\n                        that._onDone(result, textStatus, jqXHR, options);\n                    }).fail(function (jqXHR, textStatus, errorThrown) {\n                        that._onFail(jqXHR, textStatus, errorThrown, options);\n                    }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n                        that._onAlways(\n                            jqXHRorResult,\n                            textStatus,\n                            jqXHRorError,\n                            options\n                        );\n                        that._sending -= 1;\n                        that._active -= 1;\n                        if (options.limitConcurrentUploads &&\n                                options.limitConcurrentUploads > that._sending) {\n                            // Start the next queued upload,\n                            // that has not been aborted:\n                            var nextSlot = that._slots.shift();\n                            while (nextSlot) {\n                                if (that._getDeferredState(nextSlot) === 'pending') {\n                                    nextSlot.resolve();\n                                    break;\n                                }\n                                nextSlot = that._slots.shift();\n                            }\n                        }\n                        if (that._active === 0) {\n                            // The stop callback is triggered when all uploads have\n                            // been completed, equivalent to the global ajaxStop event:\n                            that._trigger('stop');\n                        }\n                    });\n                    return jqXHR;\n                };\n            this._beforeSend(e, options);\n            if (this.options.sequentialUploads ||\n                    (this.options.limitConcurrentUploads &&\n                    this.options.limitConcurrentUploads <= this._sending)) {\n                if (this.options.limitConcurrentUploads > 1) {\n                    slot = $.Deferred();\n                    this._slots.push(slot);\n                    pipe = slot.pipe(send);\n                } else {\n                    this._sequence = this._sequence.pipe(send, send);\n                    pipe = this._sequence;\n                }\n                // Return the piped Promise object, enhanced with an abort method,\n                // which is delegated to the jqXHR object of the current upload,\n                // and jqXHR callbacks mapped to the equivalent Promise methods:\n                pipe.abort = function () {\n                    aborted = [undefined, 'abort', 'abort'];\n                    if (!jqXHR) {\n                        if (slot) {\n                            slot.rejectWith(options.context, aborted);\n                        }\n                        return send();\n                    }\n                    return jqXHR.abort();\n                };\n                return this._enhancePromise(pipe);\n            }\n            return send();\n        },\n\n        _onAdd: function (e, data) {\n            var that = this,\n                result = true,\n                options = $.extend({}, this.options, data),\n                files = data.files,\n                filesLength = files.length,\n                limit = options.limitMultiFileUploads,\n                limitSize = options.limitMultiFileUploadSize,\n                overhead = options.limitMultiFileUploadSizeOverhead,\n                batchSize = 0,\n                paramName = this._getParamName(options),\n                paramNameSet,\n                paramNameSlice,\n                fileSet,\n                i,\n                j = 0;\n            if (!filesLength) {\n                return false;\n            }\n            if (limitSize && files[0].size === undefined) {\n                limitSize = undefined;\n            }\n            if (!(options.singleFileUploads || limit || limitSize) ||\n                    !this._isXHRUpload(options)) {\n                fileSet = [files];\n                paramNameSet = [paramName];\n            } else if (!(options.singleFileUploads || limitSize) && limit) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i += limit) {\n                    fileSet.push(files.slice(i, i + limit));\n                    paramNameSlice = paramName.slice(i, i + limit);\n                    if (!paramNameSlice.length) {\n                        paramNameSlice = paramName;\n                    }\n                    paramNameSet.push(paramNameSlice);\n                }\n            } else if (!options.singleFileUploads && limitSize) {\n                fileSet = [];\n                paramNameSet = [];\n                for (i = 0; i < filesLength; i = i + 1) {\n                    batchSize += files[i].size + overhead;\n                    if (i + 1 === filesLength ||\n                            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\n                            (limit && i + 1 - j >= limit)) {\n                        fileSet.push(files.slice(j, i + 1));\n                        paramNameSlice = paramName.slice(j, i + 1);\n                        if (!paramNameSlice.length) {\n                            paramNameSlice = paramName;\n                        }\n                        paramNameSet.push(paramNameSlice);\n                        j = i + 1;\n                        batchSize = 0;\n                    }\n                }\n            } else {\n                paramNameSet = paramName;\n            }\n            data.originalFiles = files;\n            $.each(fileSet || files, function (index, element) {\n                var newData = $.extend({}, data);\n                newData.files = fileSet ? element : [element];\n                newData.paramName = paramNameSet[index];\n                that._initResponseObject(newData);\n                that._initProgressObject(newData);\n                that._addConvenienceMethods(e, newData);\n                result = that._trigger(\n                    'add',\n                    $.Event('add', {delegatedEvent: e}),\n                    newData\n                );\n                return result;\n            });\n            return result;\n        },\n\n        _replaceFileInput: function (data) {\n            var input = data.fileInput,\n                inputClone = input.clone(true),\n                restoreFocus = input.is(document.activeElement);\n            // Add a reference for the new cloned file input to the data argument:\n            data.fileInputClone = inputClone;\n            $('<form></form>').append(inputClone)[0].reset();\n            // Detaching allows to insert the fileInput on another form\n            // without loosing the file input value:\n            input.after(inputClone).detach();\n            // If the fileInput had focus before it was detached,\n            // restore focus to the inputClone.\n            if (restoreFocus) {\n                inputClone.focus();\n            }\n            // Avoid memory leaks with the detached file input:\n            $.cleanData(input.unbind('remove'));\n            // Replace the original file input element in the fileInput\n            // elements set with the clone, which has been copied including\n            // event handlers:\n            this.options.fileInput = this.options.fileInput.map(function (i, el) {\n                if (el === input[0]) {\n                    return inputClone[0];\n                }\n                return el;\n            });\n            // If the widget has been initialized on the file input itself,\n            // override this.element with the file input clone:\n            if (input[0] === this.element[0]) {\n                this.element = inputClone;\n            }\n        },\n\n        _handleFileTreeEntry: function (entry, path) {\n            var that = this,\n                dfd = $.Deferred(),\n                errorHandler = function (e) {\n                    if (e && !e.entry) {\n                        e.entry = entry;\n                    }\n                    // Since $.when returns immediately if one\n                    // Deferred is rejected, we use resolve instead.\n                    // This allows valid files and invalid items\n                    // to be returned together in one set:\n                    dfd.resolve([e]);\n                },\n                successHandler = function (entries) {\n                    that._handleFileTreeEntries(\n                        entries,\n                        path + entry.name + '/'\n                    ).done(function (files) {\n                        dfd.resolve(files);\n                    }).fail(errorHandler);\n                },\n                readEntries = function () {\n                    dirReader.readEntries(function (results) {\n                        if (!results.length) {\n                            successHandler(entries);\n                        } else {\n                            entries = entries.concat(results);\n                            readEntries();\n                        }\n                    }, errorHandler);\n                },\n                dirReader, entries = [];\n            path = path || '';\n            if (entry.isFile) {\n                if (entry._file) {\n                    // Workaround for Chrome bug #149735\n                    entry._file.relativePath = path;\n                    dfd.resolve(entry._file);\n                } else {\n                    entry.file(function (file) {\n                        file.relativePath = path;\n                        dfd.resolve(file);\n                    }, errorHandler);\n                }\n            } else if (entry.isDirectory) {\n                dirReader = entry.createReader();\n                readEntries();\n            } else {\n                // Return an empy list for file system items\n                // other than files or directories:\n                dfd.resolve([]);\n            }\n            return dfd.promise();\n        },\n\n        _handleFileTreeEntries: function (entries, path) {\n            var that = this;\n            return $.when.apply(\n                $,\n                $.map(entries, function (entry) {\n                    return that._handleFileTreeEntry(entry, path);\n                })\n            ).pipe(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _getDroppedFiles: function (dataTransfer) {\n            dataTransfer = dataTransfer || {};\n            var items = dataTransfer.items;\n            if (items && items.length && (items[0].webkitGetAsEntry ||\n                    items[0].getAsEntry)) {\n                return this._handleFileTreeEntries(\n                    $.map(items, function (item) {\n                        var entry;\n                        if (item.webkitGetAsEntry) {\n                            entry = item.webkitGetAsEntry();\n                            if (entry) {\n                                // Workaround for Chrome bug #149735:\n                                entry._file = item.getAsFile();\n                            }\n                            return entry;\n                        }\n                        return item.getAsEntry();\n                    })\n                );\n            }\n            return $.Deferred().resolve(\n                $.makeArray(dataTransfer.files)\n            ).promise();\n        },\n\n        _getSingleFileInputFiles: function (fileInput) {\n            fileInput = $(fileInput);\n            var entries = fileInput.prop('webkitEntries') ||\n                    fileInput.prop('entries'),\n                files,\n                value;\n            if (entries && entries.length) {\n                return this._handleFileTreeEntries(entries);\n            }\n            files = $.makeArray(fileInput.prop('files'));\n            if (!files.length) {\n                value = fileInput.prop('value');\n                if (!value) {\n                    return $.Deferred().resolve([]).promise();\n                }\n                // If the files property is not available, the browser does not\n                // support the File API and we add a pseudo File object with\n                // the input value as name with path information removed:\n                files = [{name: value.replace(/^.*\\\\/, '')}];\n            } else if (files[0].name === undefined && files[0].fileName) {\n                // File normalization for Safari 4 and Firefox 3:\n                $.each(files, function (index, file) {\n                    file.name = file.fileName;\n                    file.size = file.fileSize;\n                });\n            }\n            return $.Deferred().resolve(files).promise();\n        },\n\n        _getFileInputFiles: function (fileInput) {\n            if (!(fileInput instanceof $) || fileInput.length === 1) {\n                return this._getSingleFileInputFiles(fileInput);\n            }\n            return $.when.apply(\n                $,\n                $.map(fileInput, this._getSingleFileInputFiles)\n            ).pipe(function () {\n                return Array.prototype.concat.apply(\n                    [],\n                    arguments\n                );\n            });\n        },\n\n        _onChange: function (e) {\n            var that = this,\n                data = {\n                    fileInput: $(e.target),\n                    form: $(e.target.form)\n                };\n            this._getFileInputFiles(data.fileInput).always(function (files) {\n                data.files = files;\n                if (that.options.replaceFileInput) {\n                    that._replaceFileInput(data);\n                }\n                if (that._trigger(\n                        'change',\n                        $.Event('change', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    that._onAdd(e, data);\n                }\n            });\n        },\n\n        _onPaste: function (e) {\n            var items = e.originalEvent && e.originalEvent.clipboardData &&\n                    e.originalEvent.clipboardData.items,\n                data = {files: []};\n            if (items && items.length) {\n                $.each(items, function (index, item) {\n                    var file = item.getAsFile && item.getAsFile();\n                    if (file) {\n                        data.files.push(file);\n                    }\n                });\n                if (this._trigger(\n                        'paste',\n                        $.Event('paste', {delegatedEvent: e}),\n                        data\n                    ) !== false) {\n                    this._onAdd(e, data);\n                }\n            }\n        },\n\n        _onDrop: function (e) {\n            e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n            var that = this,\n                dataTransfer = e.dataTransfer,\n                data = {};\n            if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                e.preventDefault();\n                this._getDroppedFiles(dataTransfer).always(function (files) {\n                    data.files = files;\n                    if (that._trigger(\n                            'drop',\n                            $.Event('drop', {delegatedEvent: e}),\n                            data\n                        ) !== false) {\n                        that._onAdd(e, data);\n                    }\n                });\n            }\n        },\n\n        _onDragOver: getDragHandler('dragover'),\n\n        _onDragEnter: getDragHandler('dragenter'),\n\n        _onDragLeave: getDragHandler('dragleave'),\n\n        _initEventHandlers: function () {\n            if (this._isXHRUpload(this.options)) {\n                this._on(this.options.dropZone, {\n                    dragover: this._onDragOver,\n                    drop: this._onDrop,\n                    // event.preventDefault() on dragenter is required for IE10+:\n                    dragenter: this._onDragEnter,\n                    // dragleave is not required, but added for completeness:\n                    dragleave: this._onDragLeave\n                });\n                this._on(this.options.pasteZone, {\n                    paste: this._onPaste\n                });\n            }\n            if ($.support.fileInput) {\n                this._on(this.options.fileInput, {\n                    change: this._onChange\n                });\n            }\n        },\n\n        _destroyEventHandlers: function () {\n            this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n            this._off(this.options.pasteZone, 'paste');\n            this._off(this.options.fileInput, 'change');\n        },\n\n        _setOption: function (key, value) {\n            var reinit = $.inArray(key, this._specialOptions) !== -1;\n            if (reinit) {\n                this._destroyEventHandlers();\n            }\n            this._super(key, value);\n            if (reinit) {\n                this._initSpecialOptions();\n                this._initEventHandlers();\n            }\n        },\n\n        _initSpecialOptions: function () {\n            var options = this.options;\n            if (options.fileInput === undefined) {\n                options.fileInput = this.element.is('input[type=\"file\"]') ?\n                        this.element : this.element.find('input[type=\"file\"]');\n            } else if (!(options.fileInput instanceof $)) {\n                options.fileInput = $(options.fileInput);\n            }\n            if (!(options.dropZone instanceof $)) {\n                options.dropZone = $(options.dropZone);\n            }\n            if (!(options.pasteZone instanceof $)) {\n                options.pasteZone = $(options.pasteZone);\n            }\n        },\n\n        _getRegExp: function (str) {\n            var parts = str.split('/'),\n                modifiers = parts.pop();\n            parts.shift();\n            return new RegExp(parts.join('/'), modifiers);\n        },\n\n        _isRegExpOption: function (key, value) {\n            return key !== 'url' && $.type(value) === 'string' &&\n                /^\\/.*\\/[igm]{0,3}$/.test(value);\n        },\n\n        _initDataAttributes: function () {\n            var that = this,\n                options = this.options,\n                data = this.element.data();\n            // Initialize options set via HTML5 data-attributes:\n            $.each(\n                this.element[0].attributes,\n                function (index, attr) {\n                    var key = attr.name.toLowerCase(),\n                        value;\n                    if (/^data-/.test(key)) {\n                        // Convert hyphen-ated key to camelCase:\n                        key = key.slice(5).replace(/-[a-z]/g, function (str) {\n                            return str.charAt(1).toUpperCase();\n                        });\n                        value = data[key];\n                        if (that._isRegExpOption(key, value)) {\n                            value = that._getRegExp(value);\n                        }\n                        options[key] = value;\n                    }\n                }\n            );\n        },\n\n        _create: function () {\n            this._initDataAttributes();\n            this._initSpecialOptions();\n            this._slots = [];\n            this._sequence = this._getXHRPromise(true);\n            this._sending = this._active = 0;\n            this._initProgressObject(this);\n            this._initEventHandlers();\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the number of active uploads:\n        active: function () {\n            return this._active;\n        },\n\n        // This method is exposed to the widget API and allows to query\n        // the widget upload progress.\n        // It returns an object with loaded, total and bitrate properties\n        // for the running uploads:\n        progress: function () {\n            return this._progress;\n        },\n\n        // This method is exposed to the widget API and allows adding files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files property and can contain additional options:\n        // .fileupload('add', {files: filesList});\n        add: function (data) {\n            var that = this;\n            if (!data || this.options.disabled) {\n                return;\n            }\n            if (data.fileInput && !data.files) {\n                this._getFileInputFiles(data.fileInput).always(function (files) {\n                    data.files = files;\n                    that._onAdd(null, data);\n                });\n            } else {\n                data.files = $.makeArray(data.files);\n                this._onAdd(null, data);\n            }\n        },\n\n        // This method is exposed to the widget API and allows sending files\n        // using the fileupload API. The data parameter accepts an object which\n        // must have a files or fileInput property and can contain additional options:\n        // .fileupload('send', {files: filesList});\n        // The method returns a Promise object for the file upload call.\n        send: function (data) {\n            if (data && !this.options.disabled) {\n                if (data.fileInput && !data.files) {\n                    var that = this,\n                        dfd = $.Deferred(),\n                        promise = dfd.promise(),\n                        jqXHR,\n                        aborted;\n                    promise.abort = function () {\n                        aborted = true;\n                        if (jqXHR) {\n                            return jqXHR.abort();\n                        }\n                        dfd.reject(null, 'abort', 'abort');\n                        return promise;\n                    };\n                    this._getFileInputFiles(data.fileInput).always(\n                        function (files) {\n                            if (aborted) {\n                                return;\n                            }\n                            if (!files.length) {\n                                dfd.reject();\n                                return;\n                            }\n                            data.files = files;\n                            jqXHR = that._onSend(null, data);\n                            jqXHR.then(\n                                function (result, textStatus, jqXHR) {\n                                    dfd.resolve(result, textStatus, jqXHR);\n                                },\n                                function (jqXHR, textStatus, errorThrown) {\n                                    dfd.reject(jqXHR, textStatus, errorThrown);\n                                }\n                            );\n                        }\n                    );\n                    return this._enhancePromise(promise);\n                }\n                data.files = $.makeArray(data.files);\n                if (data.files.length) {\n                    return this._onSend(null, data);\n                }\n            }\n            return this._getXHRPromise(false, data && data.context);\n        }\n\n    });\n\n}));\n","window.JSON||(window.JSON={}),function(){function f(a){return a<10?\"0\"+a:a}function quote(a){return escapable.lastIndex=0,escapable.test(a)?'\"'+a.replace(escapable,function(a){var b=meta[a];return typeof b==\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i==\"object\"&&typeof i.toJSON==\"function\"&&(i=i.toJSON(a)),typeof rep==\"function\"&&(i=rep.call(b,a,i));switch(typeof i){case\"string\":return quote(i);case\"number\":return isFinite(i)?String(i):\"null\";case\"boolean\":case\"null\":return String(i);case\"object\":if(!i)return\"null\";gap+=indent,h=[];if(Object.prototype.toString.apply(i)===\"[object Array]\"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||\"null\";return e=h.length===0?\"[]\":gap?\"[\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"]\":\"[\"+h.join(\",\")+\"]\",gap=g,e}if(rep&&typeof rep==\"object\"){f=rep.length;for(c=0;c<f;c+=1)d=rep[c],typeof d==\"string\"&&(e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e))}else for(d in i)Object.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e));return e=h.length===0?\"{}\":gap?\"{\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"}\":\"{\"+h.join(\",\")+\"}\",gap=g,e}}\"use strict\",typeof Date.prototype.toJSON!=\"function\"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+f(this.getUTCMonth()+1)+\"-\"+f(this.getUTCDate())+\"T\"+f(this.getUTCHours())+\":\"+f(this.getUTCMinutes())+\":\"+f(this.getUTCSeconds())+\"Z\":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var JSON=window.JSON,cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},rep;typeof JSON.stringify!=\"function\"&&(JSON.stringify=function(a,b,c){var d;gap=\"\",indent=\"\";if(typeof c==\"number\")for(d=0;d<c;d+=1)indent+=\" \";else typeof c==\"string\"&&(indent=c);rep=b;if(!b||typeof b==\"function\"||typeof b==\"object\"&&typeof b.length==\"number\")return str(\"\",{\"\":a});throw new Error(\"JSON.stringify\")}),typeof JSON.parse!=\"function\"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e==\"object\")for(c in e)Object.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\")))return j=eval(\"(\"+text+\")\"),typeof reviver==\"function\"?walk({\"\":j},\"\"):j;throw new SyntaxError(\"JSON.parse\")})}(),function(a,b){\"use strict\";var c=a.History=a.History||{},d=a.jQuery;if(typeof c.Adapter!=\"undefined\")throw new Error(\"History.js Adapter has already been loaded...\");c.Adapter={bind:function(a,b,c){d(a).bind(b,c)},trigger:function(a,b,c){d(a).trigger(b,c)},extractEventData:function(a,c,d){var e=c&&c.originalEvent&&c.originalEvent[a]||d&&d[a]||b;return e},onDomLoad:function(a){d(a)}},typeof c.init!=\"undefined\"&&c.init()}(window),function(a,b){\"use strict\";var c=a.document,d=a.setTimeout||d,e=a.clearTimeout||e,f=a.setInterval||f,g=a.History=a.History||{};if(typeof g.initHtml4!=\"undefined\")throw new Error(\"History.js HTML4 Support has already been loaded...\");g.initHtml4=function(){if(typeof g.initHtml4.initialized!=\"undefined\")return!1;g.initHtml4.initialized=!0,g.enabled=!0,g.savedHashes=[],g.isLastHash=function(a){var b=g.getHashByIndex(),c;return c=a===b,c},g.saveHash=function(a){return g.isLastHash(a)?!1:(g.savedHashes.push(a),!0)},g.getHashByIndex=function(a){var b=null;return typeof a==\"undefined\"?b=g.savedHashes[g.savedHashes.length-1]:a<0?b=g.savedHashes[g.savedHashes.length+a]:b=g.savedHashes[a],b},g.discardedHashes={},g.discardedStates={},g.discardState=function(a,b,c){var d=g.getHashByState(a),e;return e={discardedState:a,backState:c,forwardState:b},g.discardedStates[d]=e,!0},g.discardHash=function(a,b,c){var d={discardedHash:a,backState:c,forwardState:b};return g.discardedHashes[a]=d,!0},g.discardedState=function(a){var b=g.getHashByState(a),c;return c=g.discardedStates[b]||!1,c},g.discardedHash=function(a){var b=g.discardedHashes[a]||!1;return b},g.recycleState=function(a){var b=g.getHashByState(a);return g.discardedState(a)&&delete g.discardedStates[b],!0},g.emulated.hashChange&&(g.hashChangeInit=function(){g.checkerFunction=null;var b=\"\",d,e,h,i;return g.isInternetExplorer()?(d=\"historyjs-iframe\",e=c.createElement(\"iframe\"),e.setAttribute(\"id\",d),e.style.display=\"none\",c.body.appendChild(e),e.contentWindow.document.open(),e.contentWindow.document.close(),h=\"\",i=!1,g.checkerFunction=function(){if(i)return!1;i=!0;var c=g.getHash()||\"\",d=g.unescapeHash(e.contentWindow.document.location.hash)||\"\";return c!==b?(b=c,d!==c&&(h=d=c,e.contentWindow.document.open(),e.contentWindow.document.close(),e.contentWindow.document.location.hash=g.escapeHash(c)),g.Adapter.trigger(a,\"hashchange\")):d!==h&&(h=d,g.setHash(d,!1)),i=!1,!0}):g.checkerFunction=function(){var c=g.getHash();return c!==b&&(b=c,g.Adapter.trigger(a,\"hashchange\")),!0},g.intervalList.push(f(g.checkerFunction,g.options.hashChangeInterval)),!0},g.Adapter.onDomLoad(g.hashChangeInit)),g.emulated.pushState&&(g.onHashChange=function(b){var d=b&&b.newURL||c.location.href,e=g.getHashByUrl(d),f=null,h=null,i=null,j;return g.isLastHash(e)?(g.busy(!1),!1):(g.doubleCheckComplete(),g.saveHash(e),e&&g.isTraditionalAnchor(e)?(g.Adapter.trigger(a,\"anchorchange\"),g.busy(!1),!1):(f=g.extractState(g.getFullUrl(e||c.location.href,!1),!0),g.isLastSavedState(f)?(g.busy(!1),!1):(h=g.getHashByState(f),j=g.discardedState(f),j?(g.getHashByIndex(-2)===g.getHashByState(j.forwardState)?g.back(!1):g.forward(!1),!1):(g.pushState(f.data,f.title,f.url,!1),!0))))},g.Adapter.bind(a,\"hashchange\",g.onHashChange),g.pushState=function(b,d,e,f){if(g.getHashByUrl(e))throw new Error(\"History.js does not support states with fragement-identifiers (hashes/anchors).\");if(f!==!1&&g.busy())return g.pushQueue({scope:g,callback:g.pushState,args:arguments,queue:f}),!1;g.busy(!0);var h=g.createStateObject(b,d,e),i=g.getHashByState(h),j=g.getState(!1),k=g.getHashByState(j),l=g.getHash();return g.storeState(h),g.expectedStateId=h.id,g.recycleState(h),g.setTitle(h),i===k?(g.busy(!1),!1):i!==l&&i!==g.getShortUrl(c.location.href)?(g.setHash(i,!1),!1):(g.saveState(h),g.Adapter.trigger(a,\"statechange\"),g.busy(!1),!0)},g.replaceState=function(a,b,c,d){if(g.getHashByUrl(c))throw new Error(\"History.js does not support states with fragement-identifiers (hashes/anchors).\");if(d!==!1&&g.busy())return g.pushQueue({scope:g,callback:g.replaceState,args:arguments,queue:d}),!1;g.busy(!0);var e=g.createStateObject(a,b,c),f=g.getState(!1),h=g.getStateByIndex(-2);return g.discardState(f,e,h),g.pushState(e.data,e.title,e.url,!1),!0}),g.emulated.pushState&&g.getHash()&&!g.emulated.hashChange&&g.Adapter.onDomLoad(function(){g.Adapter.trigger(a,\"hashchange\")})},typeof g.init!=\"undefined\"&&g.init()}(window),function(a,b){\"use strict\";var c=a.console||b,d=a.document,e=a.navigator,f=a.sessionStorage||!1,g=a.setTimeout,h=a.clearTimeout,i=a.setInterval,j=a.clearInterval,k=a.JSON,l=a.alert,m=a.History=a.History||{},n=a.history;k.stringify=k.stringify||k.encode,k.parse=k.parse||k.decode;if(typeof m.init!=\"undefined\")throw new Error(\"History.js Core has already been loaded...\");m.init=function(){return typeof m.Adapter==\"undefined\"?!1:(typeof m.initCore!=\"undefined\"&&m.initCore(),typeof m.initHtml4!=\"undefined\"&&m.initHtml4(),!0)},m.initCore=function(){if(typeof m.initCore.initialized!=\"undefined\")return!1;m.initCore.initialized=!0,m.options=m.options||{},m.options.hashChangeInterval=m.options.hashChangeInterval||100,m.options.safariPollInterval=m.options.safariPollInterval||500,m.options.doubleCheckInterval=m.options.doubleCheckInterval||500,m.options.storeInterval=m.options.storeInterval||1e3,m.options.busyDelay=m.options.busyDelay||250,m.options.debug=m.options.debug||!1,m.options.initialTitle=m.options.initialTitle||d.title,m.intervalList=[],m.clearAllIntervals=function(){var a,b=m.intervalList;if(typeof b!=\"undefined\"&&b!==null){for(a=0;a<b.length;a++)j(b[a]);m.intervalList=null}},m.debug=function(){(m.options.debug||!1)&&m.log.apply(m,arguments)},m.log=function(){var a=typeof c!=\"undefined\"&&typeof c.log!=\"undefined\"&&typeof c.log.apply!=\"undefined\",b=d.getElementById(\"log\"),e,f,g,h,i;a?(h=Array.prototype.slice.call(arguments),e=h.shift(),typeof c.debug!=\"undefined\"?c.debug.apply(c,[e,h]):c.log.apply(c,[e,h])):e=\"\\n\"+arguments[0]+\"\\n\";for(f=1,g=arguments.length;f<g;++f){i=arguments[f];if(typeof i==\"object\"&&typeof k!=\"undefined\")try{i=k.stringify(i)}catch(j){}e+=\"\\n\"+i+\"\\n\"}return b?(b.value+=e+\"\\n-----\\n\",b.scrollTop=b.scrollHeight-b.clientHeight):a||l(e),!0},m.getInternetExplorerMajorVersion=function(){var a=m.getInternetExplorerMajorVersion.cached=typeof m.getInternetExplorerMajorVersion.cached!=\"undefined\"?m.getInternetExplorerMajorVersion.cached:function(){var a=3,b=d.createElement(\"div\"),c=b.getElementsByTagName(\"i\");while((b.innerHTML=\"<!--[if gt IE \"+ ++a+\"]><i></i><![endif]-->\")&&c[0]);return a>4?a:!1}();return a},m.isInternetExplorer=function(){var a=m.isInternetExplorer.cached=typeof m.isInternetExplorer.cached!=\"undefined\"?m.isInternetExplorer.cached:Boolean(m.getInternetExplorerMajorVersion());return a},m.emulated={pushState:!Boolean(a.history&&a.history.pushState&&a.history.replaceState&&!/ Mobile\\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i.test(e.userAgent)&&!/AppleWebKit\\/5([0-2]|3[0-2])/i.test(e.userAgent)),hashChange:Boolean(!(\"onhashchange\"in a||\"onhashchange\"in d)||m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<8)},m.enabled=!m.emulated.pushState,m.bugs={setHash:Boolean(!m.emulated.pushState&&e.vendor===\"Apple Computer, Inc.\"&&/AppleWebKit\\/5([0-2]|3[0-3])/.test(e.userAgent)),safariPoll:Boolean(!m.emulated.pushState&&e.vendor===\"Apple Computer, Inc.\"&&/AppleWebKit\\/5([0-2]|3[0-3])/.test(e.userAgent)),ieDoubleCheck:Boolean(m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<8),hashEscape:Boolean(m.isInternetExplorer()&&m.getInternetExplorerMajorVersion()<7)},m.isEmptyObject=function(a){for(var b in a)return!1;return!0},m.cloneObject=function(a){var b,c;return a?(b=k.stringify(a),c=k.parse(b)):c={},c},m.getRootUrl=function(){var a=d.location.protocol+\"//\"+(d.location.hostname||d.location.host);if(d.location.port||!1)a+=\":\"+d.location.port;return a+=\"/\",a},m.getBaseHref=function(){var a=d.getElementsByTagName(\"base\"),b=null,c=\"\";return a.length===1&&(b=a[0],c=b.href.replace(/[^\\/]+$/,\"\")),c=c.replace(/\\/+$/,\"\"),c&&(c+=\"/\"),c},m.getBaseUrl=function(){var a=m.getBaseHref()||m.getBasePageUrl()||m.getRootUrl();return a},m.getPageUrl=function(){var a=m.getState(!1,!1),b=(a||{}).url||d.location.href,c;return c=b.replace(/\\/+$/,\"\").replace(/[^\\/]+$/,function(a,b,c){return/\\./.test(a)?a:a+\"/\"}),c},m.getBasePageUrl=function(){var a=d.location.href.replace(/[#\\?].*/,\"\").replace(/[^\\/]+$/,function(a,b,c){return/[^\\/]$/.test(a)?\"\":a}).replace(/\\/+$/,\"\")+\"/\";return a},m.getFullUrl=function(a,b){var c=a,d=a.substring(0,1);return b=typeof b==\"undefined\"?!0:b,/[a-z]+\\:\\/\\//.test(a)||(d===\"/\"?c=m.getRootUrl()+a.replace(/^\\/+/,\"\"):d===\"#\"?c=m.getPageUrl().replace(/#.*/,\"\")+a:d===\"?\"?c=m.getPageUrl().replace(/[\\?#].*/,\"\")+a:b?c=m.getBaseUrl()+a.replace(/^(\\.\\/)+/,\"\"):c=m.getBasePageUrl()+a.replace(/^(\\.\\/)+/,\"\")),c.replace(/\\#$/,\"\")},m.getShortUrl=function(a){var b=a,c=m.getBaseUrl(),d=m.getRootUrl();return m.emulated.pushState&&(b=b.replace(c,\"\")),b=b.replace(d,\"/\"),m.isTraditionalAnchor(b)&&(b=\"./\"+b),b=b.replace(/^(\\.\\/)+/g,\"./\").replace(/\\#$/,\"\"),b},m.store={},m.idToState=m.idToState||{},m.stateToId=m.stateToId||{},m.urlToId=m.urlToId||{},m.storedStates=m.storedStates||[],m.savedStates=m.savedStates||[],m.normalizeStore=function(){m.store.idToState=m.store.idToState||{},m.store.urlToId=m.store.urlToId||{},m.store.stateToId=m.store.stateToId||{}},m.getState=function(a,b){typeof a==\"undefined\"&&(a=!0),typeof b==\"undefined\"&&(b=!0);var c=m.getLastSavedState();return!c&&b&&(c=m.createStateObject()),a&&(c=m.cloneObject(c),c.url=c.cleanUrl||c.url),c},m.getIdByState=function(a){var b=m.extractId(a.url),c;if(!b){c=m.getStateString(a);if(typeof m.stateToId[c]!=\"undefined\")b=m.stateToId[c];else if(typeof m.store.stateToId[c]!=\"undefined\")b=m.store.stateToId[c];else{for(;;){b=(new Date).getTime()+String(Math.random()).replace(/\\D/g,\"\");if(typeof m.idToState[b]==\"undefined\"&&typeof m.store.idToState[b]==\"undefined\")break}m.stateToId[c]=b,m.idToState[b]=a}}return b},m.normalizeState=function(a){var b,c;if(!a||typeof a!=\"object\")a={};if(typeof a.normalized!=\"undefined\")return a;if(!a.data||typeof a.data!=\"object\")a.data={};b={},b.normalized=!0,b.title=a.title||\"\",b.url=m.getFullUrl(m.unescapeString(a.url||d.location.href)),b.hash=m.getShortUrl(b.url),b.data=m.cloneObject(a.data),b.id=m.getIdByState(b),b.cleanUrl=b.url.replace(/\\??\\&_suid.*/,\"\"),b.url=b.cleanUrl,c=!m.isEmptyObject(b.data);if(b.title||c)b.hash=m.getShortUrl(b.url).replace(/\\??\\&_suid.*/,\"\"),/\\?/.test(b.hash)||(b.hash+=\"?\"),b.hash+=\"&_suid=\"+b.id;return b.hashedUrl=m.getFullUrl(b.hash),(m.emulated.pushState||m.bugs.safariPoll)&&m.hasUrlDuplicate(b)&&(b.url=b.hashedUrl),b},m.createStateObject=function(a,b,c){var d={data:a,title:b,url:c};return d=m.normalizeState(d),d},m.getStateById=function(a){a=String(a);var c=m.idToState[a]||m.store.idToState[a]||b;return c},m.getStateString=function(a){var b,c,d;return b=m.normalizeState(a),c={data:b.data,title:a.title,url:a.url},d=k.stringify(c),d},m.getStateId=function(a){var b,c;return b=m.normalizeState(a),c=b.id,c},m.getHashByState=function(a){var b,c;return b=m.normalizeState(a),c=b.hash,c},m.extractId=function(a){var b,c,d;return c=/(.*)\\&_suid=([0-9]+)$/.exec(a),d=c?c[1]||a:a,b=c?String(c[2]||\"\"):\"\",b||!1},m.isTraditionalAnchor=function(a){var b=!/[\\/\\?\\.]/.test(a);return b},m.extractState=function(a,b){var c=null,d,e;return b=b||!1,d=m.extractId(a),d&&(c=m.getStateById(d)),c||(e=m.getFullUrl(a),d=m.getIdByUrl(e)||!1,d&&(c=m.getStateById(d)),!c&&b&&!m.isTraditionalAnchor(a)&&(c=m.createStateObject(null,null,e))),c},m.getIdByUrl=function(a){var c=m.urlToId[a]||m.store.urlToId[a]||b;return c},m.getLastSavedState=function(){return m.savedStates[m.savedStates.length-1]||b},m.getLastStoredState=function(){return m.storedStates[m.storedStates.length-1]||b},m.hasUrlDuplicate=function(a){var b=!1,c;return c=m.extractState(a.url),b=c&&c.id!==a.id,b},m.storeState=function(a){return m.urlToId[a.url]=a.id,m.storedStates.push(m.cloneObject(a)),a},m.isLastSavedState=function(a){var b=!1,c,d,e;return m.savedStates.length&&(c=a.id,d=m.getLastSavedState(),e=d.id,b=c===e),b},m.saveState=function(a){return m.isLastSavedState(a)?!1:(m.savedStates.push(m.cloneObject(a)),!0)},m.getStateByIndex=function(a){var b=null;return typeof a==\"undefined\"?b=m.savedStates[m.savedStates.length-1]:a<0?b=m.savedStates[m.savedStates.length+a]:b=m.savedStates[a],b},m.getHash=function(){var a=m.unescapeHash(d.location.hash);return a},m.unescapeString=function(b){var c=b,d;for(;;){d=a.unescape(c);if(d===c)break;c=d}return c},m.unescapeHash=function(a){var b=m.normalizeHash(a);return b=m.unescapeString(b),b},m.normalizeHash=function(a){var b=a.replace(/[^#]*#/,\"\").replace(/#.*/,\"\");return b},m.setHash=function(a,b){var c,e,f;return b!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.setHash,args:arguments,queue:b}),!1):(c=m.escapeHash(a),m.busy(!0),e=m.extractState(a,!0),e&&!m.emulated.pushState?m.pushState(e.data,e.title,e.url,!1):d.location.hash!==c&&(m.bugs.setHash?(f=m.getPageUrl(),m.pushState(null,null,f+\"#\"+c,!1)):d.location.hash=c),m)},m.escapeHash=function(b){var c=m.normalizeHash(b);return c=a.escape(c),m.bugs.hashEscape||(c=c.replace(/\\%21/g,\"!\").replace(/\\%26/g,\"&\").replace(/\\%3D/g,\"=\").replace(/\\%3F/g,\"?\")),c},m.getHashByUrl=function(a){var b=String(a).replace(/([^#]*)#?([^#]*)#?(.*)/,\"$2\");return b=m.unescapeHash(b),b},m.setTitle=function(a){var b=a.title,c;b||(c=m.getStateByIndex(0),c&&c.url===a.url&&(b=c.title||m.options.initialTitle));try{d.getElementsByTagName(\"title\")[0].innerHTML=b.replace(\"<\",\"&lt;\").replace(\">\",\"&gt;\").replace(\" & \",\" &amp; \")}catch(e){}return d.title=b,m},m.queues=[],m.busy=function(a){typeof a!=\"undefined\"?m.busy.flag=a:typeof m.busy.flag==\"undefined\"&&(m.busy.flag=!1);if(!m.busy.flag){h(m.busy.timeout);var b=function(){var a,c,d;if(m.busy.flag)return;for(a=m.queues.length-1;a>=0;--a){c=m.queues[a];if(c.length===0)continue;d=c.shift(),m.fireQueueItem(d),m.busy.timeout=g(b,m.options.busyDelay)}};m.busy.timeout=g(b,m.options.busyDelay)}return m.busy.flag},m.busy.flag=!1,m.fireQueueItem=function(a){return a.callback.apply(a.scope||m,a.args||[])},m.pushQueue=function(a){return m.queues[a.queue||0]=m.queues[a.queue||0]||[],m.queues[a.queue||0].push(a),m},m.queue=function(a,b){return typeof a==\"function\"&&(a={callback:a}),typeof b!=\"undefined\"&&(a.queue=b),m.busy()?m.pushQueue(a):m.fireQueueItem(a),m},m.clearQueue=function(){return m.busy.flag=!1,m.queues=[],m},m.stateChanged=!1,m.doubleChecker=!1,m.doubleCheckComplete=function(){return m.stateChanged=!0,m.doubleCheckClear(),m},m.doubleCheckClear=function(){return m.doubleChecker&&(h(m.doubleChecker),m.doubleChecker=!1),m},m.doubleCheck=function(a){return m.stateChanged=!1,m.doubleCheckClear(),m.bugs.ieDoubleCheck&&(m.doubleChecker=g(function(){return m.doubleCheckClear(),m.stateChanged||a(),!0},m.options.doubleCheckInterval)),m},m.safariStatePoll=function(){var b=m.extractState(d.location.href),c;if(!m.isLastSavedState(b))c=b;else return;return c||(c=m.createStateObject()),m.Adapter.trigger(a,\"popstate\"),m},m.back=function(a){return a!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.back,args:arguments,queue:a}),!1):(m.busy(!0),m.doubleCheck(function(){m.back(!1)}),n.go(-1),!0)},m.forward=function(a){return a!==!1&&m.busy()?(m.pushQueue({scope:m,callback:m.forward,args:arguments,queue:a}),!1):(m.busy(!0),m.doubleCheck(function(){m.forward(!1)}),n.go(1),!0)},m.go=function(a,b){var c;if(a>0)for(c=1;c<=a;++c)m.forward(b);else{if(!(a<0))throw new Error(\"History.go: History.go requires a positive or negative integer passed.\");for(c=-1;c>=a;--c)m.back(b)}return m};if(m.emulated.pushState){var o=function(){};m.pushState=m.pushState||o,m.replaceState=m.replaceState||o}else m.onPopState=function(b,c){var e=!1,f=!1,g,h;return m.doubleCheckComplete(),g=m.getHash(),g?(h=m.extractState(g||d.location.href,!0),h?m.replaceState(h.data,h.title,h.url,!1):(m.Adapter.trigger(a,\"anchorchange\"),m.busy(!1)),m.expectedStateId=!1,!1):(e=m.Adapter.extractEventData(\"state\",b,c)||!1,e?f=m.getStateById(e):m.expectedStateId?f=m.getStateById(m.expectedStateId):f=m.extractState(d.location.href),f||(f=m.createStateObject(null,null,d.location.href)),m.expectedStateId=!1,m.isLastSavedState(f)?(m.busy(!1),!1):(m.storeState(f),m.saveState(f),m.setTitle(f),m.Adapter.trigger(a,\"statechange\"),m.busy(!1),!0))},m.Adapter.bind(a,\"popstate\",m.onPopState),m.pushState=function(b,c,d,e){if(m.getHashByUrl(d)&&m.emulated.pushState)throw new Error(\"History.js does not support states with fragement-identifiers (hashes/anchors).\");if(e!==!1&&m.busy())return m.pushQueue({scope:m,callback:m.pushState,args:arguments,queue:e}),!1;m.busy(!0);var f=m.createStateObject(b,c,d);return m.isLastSavedState(f)?m.busy(!1):(m.storeState(f),m.expectedStateId=f.id,n.pushState(f.id,f.title,f.url),m.Adapter.trigger(a,\"popstate\")),!0},m.replaceState=function(b,c,d,e){if(m.getHashByUrl(d)&&m.emulated.pushState)throw new Error(\"History.js does not support states with fragement-identifiers (hashes/anchors).\");if(e!==!1&&m.busy())return m.pushQueue({scope:m,callback:m.replaceState,args:arguments,queue:e}),!1;m.busy(!0);var f=m.createStateObject(b,c,d);return m.isLastSavedState(f)?m.busy(!1):(m.storeState(f),m.expectedStateId=f.id,n.replaceState(f.id,f.title,f.url),m.Adapter.trigger(a,\"popstate\")),!0};if(f){try{m.store=k.parse(f.getItem(\"History.store\"))||{}}catch(p){m.store={}}m.normalizeStore()}else m.store={},m.normalizeStore();m.Adapter.bind(a,\"beforeunload\",m.clearAllIntervals),m.Adapter.bind(a,\"unload\",m.clearAllIntervals),m.saveState(m.storeState(m.extractState(d.location.href,!0))),f&&(m.onUnload=function(){var a,b;try{a=k.parse(f.getItem(\"History.store\"))||{}}catch(c){a={}}a.idToState=a.idToState||{},a.urlToId=a.urlToId||{},a.stateToId=a.stateToId||{};for(b in m.idToState){if(!m.idToState.hasOwnProperty(b))continue;a.idToState[b]=m.idToState[b]}for(b in m.urlToId){if(!m.urlToId.hasOwnProperty(b))continue;a.urlToId[b]=m.urlToId[b]}for(b in m.stateToId){if(!m.stateToId.hasOwnProperty(b))continue;a.stateToId[b]=m.stateToId[b]}m.store=a,m.normalizeStore(),f.setItem(\"History.store\",k.stringify(a))},m.intervalList.push(i(m.onUnload,m.options.storeInterval)),m.Adapter.bind(a,\"beforeunload\",m.onUnload),m.Adapter.bind(a,\"unload\",m.onUnload));if(!m.emulated.pushState){m.bugs.safariPoll&&m.intervalList.push(i(m.safariStatePoll,m.options.safariPollInterval));if(e.vendor===\"Apple Computer, Inc.\"||(e.appCodeName||\"\")===\"Mozilla\")m.Adapter.bind(a,\"hashchange\",function(){m.Adapter.trigger(a,\"popstate\")}),m.getHash()&&m.Adapter.onDomLoad(function(){m.Adapter.trigger(a,\"hashchange\")})}},m.init()}(window);","(function($, window, document, navigator) {\n    \n    \"use strict\";\n    \n    var App = window.App = {\n        window: window,\n        document: document,\n        navigator: navigator,\n        $window: $(window),\n        $document: $(document),\n        isAuthUser: false,\n        config: {\n            tinymce: {\n                mode: \"textareas\",\n                height: 300,\n                plugins: \"image, link, media, table, code\",\n                toolbar: \"undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | forecolor backcolor\",\n                relative_urls: false,\n                remove_script_host: false\n            },\n            elFinder: {\n                file: \"/elFinder/elfinder.html\",\n                title: \"File Manager\",\n                width: 900,\n                height: 450,\n                resizable: \"yes\"\n            }\n        },\n        device: {\n            isMobile: false,\n            isTablet: false,\n            width: {\n                mobile: 768,\n                tablet: 992,\n                desktop: 1200\n            }\n        },\n        ajaxSetup: {cache: false},\n        routes: {},\n        functions: {},\n        widgets: {},\n        run: function() {\n            var app = this;\n            $(function() {\n                $.ajaxSetup(app.config.ajaxSetup);\n                for (var index in app.functions) {\n                    var func = app.functions[index];\n                    if (typeof func.onDomReady !== \"undefined\" && typeof func.init === \"function\") {\n                        func.init();\n                    }\n                }\n                for (var index in app.widgets) {\n                    var widget = app.widgets[index];\n                    if (typeof widget.onDomReady !== \"undefined\" && typeof widget.init === \"function\") {\n                        widget.init();\n                    }\n                }\n            });\n        }\n    };\n    \n})(jQuery, window, document, navigator);\n","var xhr;\n\nvar ajaxCall = function (url, method, data, successCallback, failCallback, params) {\n\tif (xhr != null) {\n\t\txhr.abort();\n\t}\n\n\txhr = $.ajax({\n\t\tmethod: method,\n\t\turl: url,\n\t\tdata: data\n\t})\n\t.done(function (response) {\n\t\txhr = null;\n\t\tsuccessCallback(response, params);\n\t})\n\t.fail(function (response) {\n\t\tfailCallback(response, params);\n\t});\n};\n\nvar submitForm = function () {\n\tvar $this = $(this),\n\t\t$form = $this.parents('.ajax-refine-form');\n\n\t$form.submit();\n}\n\n$(document).ready(function() {\n\t// This is to prevent the ajax caching issue in Chrome\n\t$.ajaxSetup({\n\t\tcache: false\n\t});\n\n\t// Mobile navbar\n\t$('.navbar-toggle').click(function(event) {\n\t\t$('.navbar-header .right-col').stop().slideToggle();\n\t});\n\n\t// Homepage slider\n\t$('.page-home .slider').flexslider({\n\t\tprevText: '',\n\t\tnextText: ''\n\t});\n\n\t// Product page slider\n\t$('.page-product #slider').flexslider({\n\t\tanimation: 'fade',\n\t\tcontrolNav: false,\n\t\tdirectionNav: false,\n\t\tanimationLoop: false,\n\t\tslideshow: false,\n\t\tsync: '#carousel'\n\t});\n\n\t// Product page thumbs\n\t$('.page-product #carousel').flexslider({\n\t\tanimation: 'slide',\n\t\tcontrolNav: false,\n\t\t//directionNav: false,\n\t\tanimationLoop: false,\n\t\tslideshow: false,\n\t\titemWidth: 184,\n\t\titemMargin: 22,\n\t\tasNavFor: '#slider',\n\t\tprevText: '',\n\t\tnextText: ''\n\t});\n\n\t// Product page slider nav\n\t$('.page-product .nav-prev').on('click', function() {\n\t\t$('.page-product #carousel').flexslider('prev');\n\t})\n\n\t// Product page slider nav\n\t$('.page-product .nav-next').on('click', function() {\n\t\t$('.page-product #carousel').flexslider('next');\n\t})\n\n\t// Animate on scroll\n\tAOS.init({\n\t\toffset: 200,\n\t\tduration: 600\n\t});\n\n\t// Sly scroller\n\tvar $frame = $('.products-carousel');\n\tvar $slidee = $frame.children('ul').eq(0);\n\tvar $wrap = $frame.parent();\n\n\t// Call Sly on frame\n\t$frame.sly({\n\t\thorizontal: true,\n\n\t\t// Item based navigation\n\t\titemNav: 'basic',\n\t\tactivatePageOn: 'click',\n\t\tactivateOn: 'click',\n\t\tsmart: true,\n\n\t\t// Scrolling\n\t\tscrollBy: 0,\n\n\t\t// Dragging\n\t\tmouseDragging: true,\n\t\ttouchDragging: true,\n\t\treleaseSwing: true,\n\t\tswingSpeed: 0.2,\n\t\telasticBounds: true,\n\n\t\t// Mixed options\n\t\tstartAt: 0,\n\t\teasing: 'easeOutExpo',\n\t\tspeed: 300\n\t});\n\n\t// Click search icon on header\n\t$('header .icon-search').click(function() {\n\t\t$(this).toggleClass('active');\n\n\t\tif ($(this).hasClass('active')) {\n\t\t\t$('.search-container').addClass('active');\n\n\t\t\t$('.search-container .form-control').focus();\n\t\t}\n\t\telse {\n\t\t\t$('.search-container .form-control').blur();\n\n\t\t\t$('.search-dropdown').slideUp('fast', function() {\n\t\t\t\t$('.search-container').removeClass('active');\n\t\t\t});\n\t\t}\n\t});\n\n\t// Click search dropdown close button\n\t$('.search-container .icon').click(function() {\n\t\tvar dropdown = $('.search-dropdown');\n\n\t\t$(this).removeClass('active');\n\t\t$('.search-container .form-control').val('');\n\t\tdropdown.slideUp('fast');\n\t});\n\n\t// Enter search term\n\t$('.search-container .form-control').on('input', function(e) {\n\t\twindow.clearTimeout($(this).data('timeout'));\n\n\t\tvar parent = $('.search-container');\n\t\tvar dropdown = parent.children('.search-dropdown');\n\t\tvar icon = parent.find('.icon');\n\t\tvar value = $.trim($(this).val());\n\n\t\t$(this).data('timeout', setTimeout(function() {\n\t\t\tvar successCallback = function(response) {\n\t\t\t\t//console.log(response);\n\n\t\t\t\tdropdown.html(response);\n\t\t\t};\n\n\t\t\tvar failCallback = function(response) {\n\t\t\t\t//console.log(response);\n\t\t\t};\n\n\t\t\t$('.search-container .loading').fadeIn();\n\n\t\t\tif (value != '' && value.length >= 2) {\n\t\t\t\tvar url = $('.search').attr('data-url');\n\n\t\t\t\tvar data = {\n\t\t\t\t\tsearch : value\n\t\t\t\t};\n\n\t\t\t\tajaxCall(url, 'get', data, successCallback, failCallback);\n\n\t\t\t\ticon.addClass('active');\n\n\t\t\t\tdropdown.slideDown('fast');\n\t\t\t}\n\t\t\telse {\n\t\t\t\ticon.removeClass('active');\n\n\t\t\t\tdropdown.slideUp('fast');\n\t\t\t}\n\t\t}, 500));\n\t});\n\n\t// Results page price slider\n\t$('.page-results .results-block .price-slider').slider({\n\t\tmin: 50,\n\t\tstep: 100,\n\t\tmax: 10000,\n\t\tvalue: 10000,\n\t\tslide: function(event, ui) {\n\t\t\t$('.price .value span').text(ui.value);\n\t\t},\n\t\tchange: function(event, ui) {\n\t\t\t$('#max-price').val(ui.value).change();\n\t\t}\n\t});\n\n\t// Results page view button toggle\n\t$('.page-results .results-block').on('click', '.results .views span', function() {\n\t\t$(this).siblings().removeClass('active');\n\t\t$(this).addClass('active');\n\n\t\tif ($(this).hasClass('list-view')) {\n\t\t\t$('.results-block .items-grid').hide().addClass('list-view').removeClass('grid-view').fadeIn();\n\t\t}\n\n\t\telse if ($(this).hasClass('grid-view')) {\n\t\t\t$('.results-block .items-grid').hide().addClass('grid-view').removeClass('list-view').fadeIn();\n\t\t}\n\t});\n\n\t$('.page-basket').on('submit', '.basket-delete-item', function(event) {\n\t\tevent.preventDefault();\n\t\t$form = $(this);\n\t\tvar url = $form.attr('action');\n\t\tvar method = $form.attr('method');\n\t\tvar data = $form.serializeArray();\n\t\tvar params = {};\n\n\t\tvar successCallback = function (response) {\n\t\t\t$('.ajax-basket').html(response);\n\t\t};\n\t\tvar failCallback = function (response) {\n\t\t};\n\n\t\tif(confirm('Are you sure you want to remove this item from your basket?')) {\n\t\t\t$('.overlay').fadeIn('fast');\n\n\t\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t\t}\n\t});\n\n\t// Disable default form submit on enter keypress\n\t$('.page-basket').on('keyup keypress', '.basket-quantity', function(e) {\n\t\tvar keyCode = e.keyCode || e.which;\n\n\t\tif (keyCode === 13) {\n\t\t\te.preventDefault();\n\n\t\t\t$(this).blur();\n\t\t}\n\t});\n\n\t$('.page-basket').on('change', '.basket-quantity', function() {\n\t\tvar item = $(this).parents('.item');\n\n\t\t$(this).parent('form').submit();\n\n\t\t$('.overlay').fadeIn('fast');\n\t});\n\n\t$('.page-basket').on('submit', '.basket-update-form', function(event) {\n\t\tevent.preventDefault();\n\t\t$form = $(this);\n\t\tvar parent = $form.parents('.item');\n\t\tvar url = $form.attr('action');\n\t\tvar method = $form.attr('method');\n\t\tvar data = $form.serializeArray();\n\t\tvar params = {};\n\n\t\tif(parseInt($form.find('.basket-quantity').val()) < 1 ) {\n\t\t\tvar error = 'Quantity must be greater than 1';\n\t\t\t$('.overlay').addClass('error').find('.error-text').text(error);\n\t\t\treturn;\n\t\t}\n\n\t\tvar successCallback = function (response) {\n\t\t\t$('.ajax-basket').html(response);\n\t\t};\n\t\tvar failCallback = function (response) {\n\t\t\tvar errors = response.responseJSON.quantity;\n\t\t\tvar error = errors[errors.length - 1];\n\t\t\t$('.overlay').addClass('error').find('.error-text').text(error);\n\t\t};\n\n\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t});\n\n\t// Basket page - click OK button on error message overlay\n\t$('.page-basket').on('click', '.error-message .btn-ok', function() {\n\t\t$(this).parents('.overlay').fadeOut().removeClass('error');\n\t});\n\n\t// Show refine filters\n\t$('.page-results .filters .show-filters').click(function() {\n\t\t$('.filters-main').slideToggle();\n\n\t\tvar span = $(this).children('span');\n\n\t\tvar text = span.text();\n\n\t\tspan.text(text == 'Show Filters' ? 'Hide Filters' : 'Show Filters');\n\t});\n\n\t$('.page-product .product-variant').change(function(event) {\n\t\t$selected = $(this).find(':selected');\n\t\tvar price = $selected.attr('data-price');\n\t\tvar stock = $selected.attr('data-stock');\n                var sku = $selected.attr('data-sku');\n\n\t\t$('.price span').text(price);\n\t\t$('.stock span').text(stock);\n                $('.sku').text(sku);\n\t});\n\n\t/*$(document).on('submit', '.contact-us-form', function(event) {\n\t\tevent.preventDefault();\n\t\t\n\t\t$form = $(this);\n\t\tvar url = $form.attr('action');\n\t\tvar method = $form.attr('method');\n\t\tvar data = $form.serializeArray();\n\t\tvar params = {};\n\t\t\n\t\tvar successCallback = function (response) {\n\t\t\tconsole.log(response);\n\t\t};\n\t\tvar failCallback = function (response) {\n\t\t\tconsole.log(response);\n\t\t};\n\t\t\n\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t});*/\n\n\t// Made to Measure - click 'add / remove trim' button\n\t/*$('.page-designer #controls #add-remove-trim .content').click(function() {\n\t\t$(this).parent().toggleClass('active');\n\n\t\t$('#frame').toggleClass('trim-active');\n\t});*/\n\n\t// Made to Measure - change measurement units\n\t$('.page-designer #measurement-units').change(function() {\n\t\tvar value = $(this).val();\n\n\t\tif (value == 'M') {\n\t\t\t$('.imperial').hide();\n\t\t\t$('.metric').show();\n\t\t}\n\t\telse if (value == 'I') {\n\t\t\t$('.imperial').show();\n\t\t\t$('.metric').hide();\n\t\t}\n\t});\n\n\t// Click 'choose file' button on create your own page\n\t$('.page-create-your-own .btn-select').click(function() {\n\t\t$('#file').click();\n\t});\n\n\t// Submit form on file input change\n\t$('.page-create-your-own #file').change(function() {\n\t\t$(this).parent('form').submit();\n\t\t$('.btn-select').addClass('active');\n\t});\n\n\t// Submit ajax form on input click\n\t$('.ajax-refine-form').on('click', 'input[type=\"checkbox\"], input[type=\"radio\"]', submitForm);\n\n\t// Submit ajax form on input change\n\t$('.ajax-refine-form').on('change', 'input[type=\"text\"], input[type=\"hidden\"], select', submitForm);\n\n\t// Disable default form submit on enter keypress\n\t$('.ajax-refine-form').on('keyup keypress', 'input[type=\"text\"]', function(e) {\n\t\tvar keyCode = e.keyCode || e.which;\n\n\t\tif (keyCode === 13) {\n\t\t\te.preventDefault();\n\n\t\t\t$(this).blur();\n\t\t}\n\t});\n\n\t// Made to measure ajax filters\n\t$('.page-results .ajax-refine-form').submit(function(event) {\n\t\tevent.preventDefault();\n\n\t\t$form = $(this);\n\t\tvar $container = $form.find('.form-ajax-response'),\n\t\t\tparent = $container.parents('form'),\n\t\t\tloading = parent.find('.loading'),\n\t\t\turl = $form.attr('action'),\n\t\t\tmethod = $form.attr('method'),\n\t\t\tdata = $form.serialize(),\n\t\t\thistoryURL = url + '?' + data,\n\t\t\tparams = {};\n\n\t\t// show loading indicator\n\t\tloading.fadeIn('fast');\n\n\t\tvar successCallback = function (response) {\n\t\t\t$container.html(response);\n\t\t\tApp.functions.addToBrowserHistory.init(historyURL, \"Shop\");\n\t\t\tApp.functions.scrollToElement.init($container, 0);\n\t\t\tloading.fadeOut('fast');\n\t\t};\n\t\tvar failCallback = function (response) {\n\t\t\tconsole.log(response.responseText);\n\t\t\tloading.fadeOut('fast');\n\t\t};\n\n\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t});\n\n\t// Copyright checkbox on create your own page\n\t$('.page-designer #copyright').change(function() {\n\t\tvar checked = $(this).is(':checked');\n\n\t\t$('#add-to-basket').prop('disabled', !checked);\n\t});\n\n\t// when the country filed changes value for shipping address, we get the price\n\t$('.page-checkout-delivery-address .shipping-country').change(function(event) {\n\t\tvar $selected = $(this).find(':selected'),\n\t\t\t$country = $selected.attr('value'),\n\t\t\t$loading = $('#delivery-address-form').children('.loading');\n \n\t\tvar url = $(this).attr('data-url');\n\t\tvar method = 'GET';\n\t\tvar data = { country: $country };\n\t\tvar params = {};\n\n\t\t$loading.fadeIn('fast');\n\n\t\tvar successCallback = function (response) {\n\t\t\t$('#delivery-price').text(response.price);\n\t\t\t$loading.fadeOut('fast');\n\t\t};\n\t\tvar failCallback = function (response) {\n\t\t\tconsole.log(response);\n\t\t\t$loading.fadeOut('fast');\n\t\t};\n\n\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t});\n\n\t// Use billing address copy function\n\t$('.page-checkout-delivery-address #use-billing-address').click(function() {\n\t\tvar $this = $(this),\n\t\t\t$form = $('#delivery-address-form'),\n\t\t\t$selects = $form.find('select'),\n\t\t\t$loading = $form.children('.loading');\n\n\t\t$loading.fadeIn('fast');\n\n\t\t$.ajax({\n\t\t\ttype: 'get',\n\t\t\turl: App.routes.getBillingAddressURL,\n\t\t\tcache: false,\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function(response) {\n\t\t\t\tfor (var index in response) {\n\t\t\t\t\t$form.find('#' + index).val(response[index]).change();\n\t\t\t\t}\n\t\t\t\t$loading.fadeOut('fast');\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tconsole.log(error.responseText);\n\t\t\t\t$loading.fadeOut('fast');\n\t\t\t}\n\t\t});\n\t});\n\n    // use existing address copy function\n\t$('.page-checkout-billing-address #use-existing-address, .page-checkout-delivery-address #use-existing-address').change(function() {\n\t\tvar $this = $(this),\n\t\t\t$form = $('#'+$(this).attr('data-form')),\n\t\t\t$selects = $form.find('select'),\n\t\t\t$loading = $form.children('.loading');\n\n\t\t$loading.fadeIn('fast');\n\n\t\t$.ajax({\n\t\t\ttype: 'get',\n\t\t\turl: App.routes.getAddressURL,\n\t\t\tcache: false,\n            data: $(this).serializeArray(),\n\t\t\tdataType: 'json',\n\t\t\tsuccess: function(response) {\n\t\t\t\tfor (var index in response) {\n\t\t\t\t\t$form.find('#' + index).val(response[index]).change();\n\t\t\t\t}\n\t\t\t\t$loading.fadeOut('fast');\n\t\t\t},\n\t\t\terror: function(error) {\n\t\t\t\tconsole.log(error.responseText);\n\t\t\t\t$loading.fadeOut('fast');\n\t\t\t}\n\t\t});\n\t});\n\n    $('.delete-address').submit(function(event) {\n\t\tevent.preventDefault();\n\t\t$form = $(this);\n\t\tvar url = $form.attr('action');\n\t\tvar method = $form.attr('method');\n\t\tvar data = $form.serializeArray();\n\t\tvar params = {};\n\n\t\tvar successCallback = function (response) {\n            $form.closest('.item').fadeOut();\n\t\t};\n\t\tvar failCallback = function (response) {\n            \n\t\t};\n\n\t\tif(confirm('Are you sure you want to delete this address?')) {\n\t\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t\t}\n\t});\n\n    $('.delete-favorite').submit(function(event) {\n\t\tevent.preventDefault();\n\t\t$form = $(this);\n\t\tvar url = $form.attr('action');\n\t\tvar method = $form.attr('method');\n\t\tvar data = $form.serializeArray();\n\t\tvar params = {};\n\n\t\tvar successCallback = function (response) {\n            window.location.reload();\n\t\t};\n\t\tvar failCallback = function (response) {\n            \n\t\t};\n\n\t\tif(confirm('Are you sure you want to delete this favourite?')) {\n\t\t\tajaxCall(url, method, data, successCallback, failCallback, params);\n\t\t}\n\t});\n\n    // allow the user to toggle favourite\n    $('.page-results .results-block, .page-designer .form, .page-product form, .page-home .featured-block').on('click', '.favourite', function(event) {\n        event.preventDefault();\n        var element = $(this);\n\n        var successCallback = function (response) {\n            element.removeClass('waiting').toggleClass('active');\n        };\n        var failCallback = function (response) {\n            alert('There was an error in updating favourite');\n        };\n\n        if(App.isAuthUser) {\n            element.addClass('waiting');\n\n            ajaxCall(\n                App.routes.toggleFavourite,\n                'GET',\n                {\n                    product_id: $(this).attr('data-product-id')\n                },\n                successCallback,\n                failCallback\n            );\n        } else {\n            alert('You need to log in to perform this action.');\n        }\n    });\n\n\t$('.page-results .results-block').on('click', '.quick-view', function(event) {\n\t\tevent.preventDefault();\n\n\t\tvar image = $(this).attr('data-image');\n\n\t\t$('.modal-body .image').css('background-image', 'url(' + image + ')');\n\t});\n\n\t$('.social-share a').click(function(e) {\n\t    // Prevent default anchor event\n\t    e.preventDefault();\n\n\t    var obj = $(this);\n\n\t    // Set values for window\n\t    var intWidth = '600';\n\t    var intHeight = '500';\n\n\t    // Set title and open popup with focus on it\n\t    var strTitle = ((typeof obj.attr('title') !== 'undefined') ? obj.attr('title') : 'Social Share');\n\t    var strParam = 'width=' + intWidth + ',height=' + intHeight + ',resizable=yes,scrollbars=no';\n\n\t    window.open(obj.attr('href'), strTitle, strParam).focus();\n\t});\n        \n        // this function will show the review form \n        $('.write-review').click(function(e) {\n            $('.review-form').slideToggle();\n\t});\n\n});\n\n// global variable for the player\nvar player;\n\n// this function gets called when API is ready to use\nfunction onYouTubePlayerAPIReady() {\n\t// create the global player from the specific iframe (#video)\n\tplayer = new YT.Player('video', {\n\t\tevents: {\n\t\t\t// call this function when player is ready to use\n\t\t\t'onReady': onPlayerReady\n\t\t}\n\t});\n}\n\nfunction onPlayerReady(event) {\n\tvar button = $('.page-home .video #play-button');\n\n\tbutton.click(function() {\n\t\t$(this).parents('.overlay').removeClass('inactive');\n\n\t\tif ($(this).hasClass('active')) {\n\t\t\tplayer.pauseVideo();\n\t\t}\n\t\telse {\n\t\t\tplayer.playVideo();\n\t\t}\n\n\t\t$(this).toggleClass('active');\n\t});\n}\n\nfunction loadDataOnScroll(element, url, limit, offset, count) {\n    var wait = false;\n    offset = offset + limit;\n    var scroll = function() {\n        var $this = $(this);\n        if (offset <= count && wait === false) {\n            wait = true;\n            $.get(url, {offset: offset}, function(response) {\n                element.append(response);\n                offset = offset + limit;\n                wait = false;\n                if (offset > count) {\n                    $this.addClass('hidden');\n                }\n            }).fail(function(error) {\n                alert(error.responseText);\n            });\n        }\n    };\n    $(document).on('click', '.load-more', scroll);\n}\n\n$(window).on('load', function() {\n\tif ($('.page-home').length) {\n\t\t// Inject YouTube API script\n\t\tvar tag = document.createElement('script');\n\t\ttag.src = \"//www.youtube.com/player_api\";\n\t\tvar firstScriptTag = document.getElementsByTagName('script')[0];\n\t\tfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\t}\n});\n\n$(window).on('resize', function() {\n\tif ($('.page-home').length) {\n\t\tvar $frame = $('.products-carousel');\n\n\t\t$frame.sly('reload');\n\t}\n});","(function(App, $) {\n    \n    \"use strict\";\n    \n    App.functions = App.functions || {};\n    \n    var fn = App.functions,\n        $document = App.$document,\n        routes = App.routes;\n    \n    fn.ajaxFileUpload = {\n        onDomReady: true,\n        _config: {\n            inputSelector: 'input.ajax-file-upload',\n            dataType: \"json\"\n        },\n        _setConfig: function(config) {\n            if (typeof config !== \"undefined\") {\n                $.extend(this._config, config);\n            }\n        },\n        _setCurrentSelectors: function(thisInput) {\n            var obj = this;\n            obj._config._fileInput = thisInput;\n            obj._config._fileType = thisInput.data('type');\n            obj._config._progressElement = thisInput.prev('.upload-progress');\n            obj._config._form = thisInput.parents('form');\n            obj._config._submitBtn = obj._config._form.find('button[type=\"submit\"]');\n            obj._config._previewContainer = $('#' + thisInput.data('preview-container'));\n            obj._config._imgElement = obj._config._previewContainer.find('img');\n            obj._config._linkElement = obj._config._previewContainer.find('a');\n            obj._config._pathInput = obj._config._previewContainer.find('input[type=\"hidden\"]');\n        },\n        _change: function(event, data) {\n            var obj = this;\n            obj._config._submitBtn.prop('disabled', true);\n        },\n        _progress: function(event, data) {\n            var obj = this,\n                progress = parseInt(data.loaded / data.total * 100, 10);\n            obj._config._progressElement.text(progress + '%');\n        },\n        _success: function(event, data) {\n            var obj = this,\n                response = data.result;\n            obj._config._pathInput.val(response.filePath);\n            obj._config._progressElement.empty();\n            obj._config._submitBtn.prop('disabled', false);\n            if (obj._config._fileType === 'image') {\n                if (obj._config._imgElement.length) {\n                    obj._config._imgElement.attr('src', routes.baseURL + '/' + response.filePath);\n                } else {\n                    obj._config._previewContainer.prepend('<img class=\"materialboxed\" src=\"' + routes.baseURL + '/' + response.filePath + '\" alt=\"Featured Image\" />');\n                    $document.trigger('refreshMaterialBox');\n                }\n            } else {\n                if (obj._config._linkElement.length) {\n                    obj._config._linkElement.attr('href', routes.baseURL + '/' + response.filePath);\n                } else {\n                    obj._config._previewContainer.prepend('<a href=\"' + routes.baseURL + '/' + response.filePath + '\" target=\"_blank\">View File</a>');\n                }\n            }\n        },\n        _error: function(event, data) {\n            var obj = this,\n                error = data._response.jqXHR;\n            obj._config._progressElement.empty();\n            obj._config._submitBtn.prop('disabled', false);\n            alert(error.responseText);\n        },\n        init: function(params) {\n            var obj = this;\n            obj._setConfig(params);\n            $(obj._config.inputSelector).each(function() {\n                var $this = $(this);\n                $this.fileupload({\n                    dataType: obj._config.dataType,\n                    change: function(event, data) {\n                        obj._setCurrentSelectors($this);\n                        obj._change(event, data);\n                    },\n                    progressall: function(event, data) {\n                        obj._progress(event, data);\n                    },\n                    done: function(event, data) {\n                        obj._success(event, data);\n                    },\n                    fail: function(event, data) {\n                        obj._error(event, data);\n                    }\n                });\n            });\n        }\n    };\n    \n})(App, jQuery);\n","(function(App, $) {\n    \n    \"use strict\";\n    \n    App.functions = App.functions || {};\n    \n    var fn = App.functions;\n    \n    fn.ajaxSubmitForm = {\n        onDomReady: true,\n        _config: {\n            formSelector: 'form.ajax-submit',\n            btnSelector: 'button.submit-form',\n            inputGroupSelector: '.form-field-group',\n            validationSelector: '.validation-error',\n            alertSelector: '.alert-container',\n            errorClass: 'error',\n            hiddenClass: 'hidden'\n        },\n        _setConfig: function(config) {\n            if (typeof config !== \"undefined\") {\n                $.extend(this._config, config);\n            }\n        },\n        _setCurrentSelectors: function(btn) {\n            var obj = this;\n            obj._config._btn = btn;\n            obj._config._form = btn.parents(obj._config.formSelector);\n        },\n        _submit: function() {\n            var obj = this,\n                form = obj._config._form,\n                btn = obj._config._btn;\n            btn.prop('disabled', true);\n            $.post(form.attr('action'), form.serializeArray(), function(response) {\n                obj._handleSuccess(response);\n            }).fail(function(error) {\n                obj._handleError(error);\n            });\n        },\n        _handleSuccess: function(response) {\n            var obj = this,\n                $form = obj._config._form,\n                $btn = obj._config._btn,\n                $alertContainer = $(obj._config.alertSelector);\n            $btn.prop('disabled', false);\n            obj._clearValidationErrors();\n            if ($form.data('submit') === true) {\n                $form.submit();\n            } else {\n                if ($form.data('reset') === true) {\n                    $form.trigger('reset');\n                }\n                $alertContainer.replaceWith(response);\n                fn.scrollToElement.init($(obj._config.alertSelector), 0);\n            }\n        },\n        _handleError: function(error) {\n            var obj = this,\n                btn = obj._config._btn;\n            btn.prop('disabled', false);\n            if (error.status === 400 || error.status === 422) {\n                obj._handleValidationError(error.responseJSON);\n            } else {\n                alert(error.responseText);\n            }\n        },\n        _handleValidationError: function(errors) {\n            var obj = this,\n                form = obj._config._form;\n            obj._clearValidationErrors();\n            for (var index in errors) {\n                var $field = form.find('#' + index),\n                    errorArray = errors[index],\n                    errorText = null;\n                for (var i in errorArray) {\n                    errorText = (errorText === null) ? errorArray[i] : errorText + \"<br />\" + errorArray[i];\n                }\n                obj._addValidationError($field, errorText);\n            }\n        },\n        _clearValidationErrors: function() {\n            var obj = this,\n                form = obj._config._form;\n            form.find(obj._config.inputGroupSelector).removeClass(obj._config.errorClass).find(obj._config.validationSelector).empty().addClass(obj._config.hiddenClass);\n        },\n        _addValidationError: function(input, errorText) {\n            var obj = this;\n            input.parents(obj._config.inputGroupSelector).addClass(obj._config.errorClass).find(obj._config.validationSelector).html(errorText).removeClass(obj._config.hiddenClass);\n        },\n        init: function(params) {\n            var obj = this;\n            obj._setConfig(params);\n            $(obj._config.formSelector).each(function() {\n                var $form = $(this),\n                    $btn = $form.find(obj._config.btnSelector),\n                    $input = $form.find('input');\n                $input.bind('keypress', function(event) {\n                    if (event.which === 13) {\n                        event.preventDefault();\n                        $btn.click();\n                    }\n                });\n                $btn.click(function() {\n                    obj._setCurrentSelectors($(this));\n                    obj._submit();\n                });\n            });\n        }\n    };\n    \n})(App, jQuery);\n","(function (App, $, History) {\n\t\n\t\"use strict\";\n\t\n\tApp.functions = App.functions || {};\n\t\n\tvar fn = App.functions,\n\t\tdevice = App.device,\n\t\t$window = App.$window,\n\t\t$document = App.$document;\n\t\t\n\tfn.checkDevice = {\n\t\tonDomReady: true,\n\t\t_onResize: function() {\n\t\t\tdevice.isMobile = ($window.width() < device.width.mobile) ? true : false;\n\t\t\tdevice.isTablet = ($window.width() < device.width.tablet) ? true : false;\n\t\t},\n\t\tinit: function() {\n\t\t\t$window.on('resize', this._onResize);\n\t\t\tthis._onResize();\n\t\t}\n\t};\n\t\n\tfn.confirmDelete = {\n\t\tonDomReady: true,\n\t\t_config: {\n\t\t\tformSelector: 'form.delete-form',\n\t\t\tmessage: 'Are you sure you want to delete it?'\n\t\t},\n\t\t_setConfig: function(config) {\n\t\t\tif (typeof config !== \"undefined\") {\n\t\t\t\t$.extend(this._config, config);\n\t\t\t}\n\t\t},\n\t\tinit: function(params) {\n\t\t\tvar obj = this;\n\t\t\tobj._setConfig(params);\n\t\t\t$document.on('submit', obj._config.formSelector, function() {\n\t\t\t\tvar $this = $(this),\n\t\t\t\t\t\tmessage = ($this.data('message')) ? $this.data('message') : obj._config.message;\n\t\t\t\treturn confirm(message);\n\t\t\t});\n\t\t}\n\t};\n\t\n\tfn.addToBrowserHistory = {\n\t\tinit: function(historyURL, pageTitle) {\n\t\t\tpageTitle = (pageTitle) ? pageTitle + ' | ohpopsi' : 'ohpopsi';\n\t\t\tHistory.pushState({path: historyURL}, pageTitle, historyURL);\n\t\t}\n\t};\n\t\n\tfn.initializeAjaxPagination = {\n\t\tonDomReady: true,\n\t\tinit: function() {\n\t\t\t$(document).on('click', '.ajax-pagination a', function(event) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tvar $this = $(this),\n\t\t\t\t\t$container = $('.ajax-pagination-response'),\n\t\t\t\t\tparent = $container.parents('form'),\n\t\t\t\t\tloading = parent.find('.loading'),\n\t\t\t\t\thistoryURL = $this.attr('href'),\n\t\t\t\t\tpageTitle = $this.parents('.ajax-pagination').data('page-title');\n\n\t\t\t\t// show loading indicator\n\t\t\t\tloading.fadeIn('fast');\n\n\t\t\t\t$.get($this.attr('href'), function(response) {\n\t\t\t\t\t$container.html(response);\n\t\t\t\t\tfn.addToBrowserHistory.init(historyURL, pageTitle);\n\t\t\t\t\tfn.scrollToElement.init($container, 0);\n\t\t\t\t\tloading.fadeOut('fast');\n\t\t\t\t}).fail(function(error) {\n\t\t\t\t\talert(error.responseText);\n\t\t\t\t\tloading.fadeOut('fast');\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t};\n\n\tfn.scrollToTop = {\n\t\tinit: function(speed) {\n\t\t\t$('html, body').animate({ scrollTop: 0 }, speed);\n\t\t}\n\t};\n\n\tfn.scrollToElement = {\n\t\tinit: function(element, speed) {\n\t\t\t$('html, body').animate({ scrollTop: element.offset().top - 50 }, speed);\n\t\t}\n\t};\n\n})(App, jQuery, History);\n"]}